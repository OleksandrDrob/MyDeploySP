// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Coralogix -package-name cx_ios_sdk
import CoreTelephony
import CrashReporter
import Darwin
import Foundation
import MetricKit
import Network
import ObjectiveC
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.activity
import os.log
import os
import ObjectiveC.runtime
@available(iOS 13, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func trackCXTapAction(name: Swift.String, attributes: [Swift.String : Any] = [String: Any](), count: Swift.Int = 1) -> some SwiftUICore.View
  
}
extension Coralogix.CoralogixRum {
  public func initializeUserActionsInstrumentation()
}
public class CoralogixRum {
  public init(options: Coralogix.CoralogixExporterOptions, sdkFramework: Coralogix.SdkFramework = .swift)
  @objc deinit
  public func setUserContext(userContext: Coralogix.UserContext)
  public func setLabels(labels: [Swift.String : Any])
  public func reportError(exception: Foundation.NSException)
  public func reportError(error: Foundation.NSError)
  public func reportError(error: any Swift.Error)
  public func setView(name: Swift.String)
  public func reportError(message: Swift.String, data: [Swift.String : Any]?)
  public func reportError(message: Swift.String, stackTrace: Swift.String?)
  public func log(severity: Coralogix.CoralogixLogSeverity, message: Swift.String, data: [Swift.String : Any]? = nil)
  public func shutdown()
}
public enum SdkFramework : Swift.String {
  case swift
  case flutter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CoralogixExporterOptions {
  public enum InstrumentationType {
    case mobileVitals
    case navigation
    case custom
    case errors
    case network
    case userActions
    case anr
    case lifeCycle
    public static func == (a: Coralogix.CoralogixExporterOptions.InstrumentationType, b: Coralogix.CoralogixExporterOptions.InstrumentationType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(coralogixDomain: Coralogix.CoralogixDomain, userContext: Coralogix.UserContext? = nil, environment: Swift.String, application: Swift.String, version: Swift.String, publicKey: Swift.String, ignoreUrls: [Swift.String]? = nil, ignoreErrors: [Swift.String]? = nil, customDomainUrl: Swift.String? = nil, labels: [Swift.String : Any]? = nil, sampleRate: Swift.Int = 100, mobileVitalsFPSSamplingRate: Swift.Int = 300, instrumentations: [Coralogix.CoralogixExporterOptions.InstrumentationType : Swift.Bool]? = nil, collectIPData: Swift.Bool = true, beforeSend: (([Swift.String : Any]) -> [Swift.String : Any]?)? = nil, debug: Swift.Bool = false)
}
public class CoralogixExporter : Coralogix.SpanExporter {
  public init(options: Coralogix.CoralogixExporterOptions, versionMetadata: Coralogix.VersionMetadata, sessionManager: Coralogix.SessionManager, networkManager: any Coralogix.NetworkProtocol, viewManager: Coralogix.ViewManager, metricsManager: Coralogix.MetricsManager)
  public func getOptions() -> Coralogix.CoralogixExporterOptions
  public func set(cxView: Coralogix.CXView)
  public func updade(userContext: Coralogix.UserContext)
  public func updade(labels: [Swift.String : Any])
  public func updade(view: Coralogix.ViewManager)
  public func export(spans: [Coralogix.SpanData], explicitTimeout: Foundation.TimeInterval?) -> Coralogix.SpanExporterResultCode
  public func flush(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.SpanExporterResultCode
  public func shutdown(explicitTimeout: Foundation.TimeInterval?)
  @objc deinit
}
extension Coralogix.CoralogixRum {
  public func initializeCrashInstumentation()
}
extension Coralogix.CoralogixRum {
  public func initializeLifeCycleInstrumentation()
}
extension Coralogix.CoralogixRum {
  public func initializeMobileVitalsInstrumentation()
}
extension Coralogix.CoralogixRum {
  public func initializeNavigationInstrumentation()
}
extension Coralogix.CoralogixRum {
  public func initializeNetworkInstrumentation()
  public func setNetworkRequestContext(dictionary: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class CxSpan {
  @objc deinit
}
public struct VersionMetadata {
}
public struct SessionMetadata {
}
public struct SnapshotConext {
}
public struct UserContext : Swift.Equatable {
  public init(userId: Swift.String, userName: Swift.String, userEmail: Swift.String, userMetadata: [Swift.String : Swift.String])
  public func getDictionary() -> [Swift.String : Any]
  public static func == (lhs: Coralogix.UserContext, rhs: Coralogix.UserContext) -> Swift.Bool
}
public class NetworkMonitor : Coralogix.NetworkMonitorProtocol {
  @objc deinit
  public init() throws
  public func getConnection() -> Coralogix.Connection
}
public enum Connection {
  case unavailable, wifi, cellular
  public static func == (a: Coralogix.Connection, b: Coralogix.Connection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkMonitorProtocol {
  func getConnection() -> Coralogix.Connection
}
public class NetworkStatusClass {
  public var networkInfo: CoreTelephony.CTTelephonyNetworkInfo? {
    get
  }
  public var networkMonitor: any Coralogix.NetworkMonitorProtocol {
    get
  }
  convenience public init() throws
  public init(with monitor: any Coralogix.NetworkMonitorProtocol)
  public func status() -> (Swift.String, Swift.String?, CoreTelephony.CTCarrier?)
  @objc deinit
}
public class NetworkStatusInjector {
  public init(netstat: Coralogix.NetworkStatusClass)
  public func inject(span: any Coralogix.Span)
  @objc deinit
}
public protocol NetworkStatusProtocol {
  var networkMonitor: any Coralogix.NetworkMonitorProtocol { get }
  func getStatus() -> (Swift.String, CoreTelephony.CTCarrier?)
}
public protocol Baggage : AnyObject {
  static func baggageBuilder() -> any Coralogix.BaggageBuilder
  func getEntries() -> [Coralogix.Entry]
  func getEntryValue(key: Coralogix.EntryKey) -> Coralogix.EntryValue?
}
public func == (lhs: any Coralogix.Baggage, rhs: any Coralogix.Baggage) -> Swift.Bool
public protocol BaggageBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: (any Coralogix.Baggage)?) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func put(key: Coralogix.EntryKey, value: Coralogix.EntryValue, metadata: Coralogix.EntryMetadata?) -> Self
  @discardableResult
  func remove(key: Coralogix.EntryKey) -> Self
  func build() -> any Coralogix.Baggage
}
public protocol BaggageManager : AnyObject {
  func baggageBuilder() -> any Coralogix.BaggageBuilder
}
public protocol BaggageManagerProvider {
  func create() -> any Coralogix.BaggageManager
}
final public class DefaultBaggage : Coralogix.Baggage, Swift.Equatable {
  public init(entries: [Coralogix.EntryKey : Coralogix.Entry?])
  public static func baggageBuilder() -> any Coralogix.BaggageBuilder
  final public func getEntries() -> [Coralogix.Entry]
  final public func getEntryValue(key: Coralogix.EntryKey) -> Coralogix.EntryValue?
  public static func == (lhs: Coralogix.DefaultBaggage, rhs: Coralogix.DefaultBaggage) -> Swift.Bool
  @objc deinit
}
public class DefaultBaggageBuilder : Coralogix.BaggageBuilder {
  public init()
  @discardableResult
  public func setParent(_ parent: (any Coralogix.Baggage)?) -> Self
  @discardableResult
  public func setNoParent() -> Self
  @discardableResult
  public func put(key: Coralogix.EntryKey, value: Coralogix.EntryValue, metadata: Coralogix.EntryMetadata?) -> Self
  @discardableResult
  public func put(key: Swift.String, value: Swift.String, metadata: Swift.String? = nil) -> Self
  @discardableResult
  public func remove(key: Coralogix.EntryKey) -> Self
  public func build() -> any Coralogix.Baggage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultBaggageManager : Coralogix.BaggageManager {
  public static var instance: Coralogix.DefaultBaggageManager
  public func baggageBuilder() -> any Coralogix.BaggageBuilder
  public func getCurrentBaggage() -> (any Coralogix.Baggage)?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultBaggageManagerProvider : Coralogix.BaggageManagerProvider {
  public static var instance: Coralogix.DefaultBaggageManagerProvider
  public func create() -> any Coralogix.BaggageManager
  @objc deinit
}
public struct Entry : Swift.Equatable, Swift.Comparable {
  public var key: Coralogix.EntryKey {
    get
  }
  public var value: Coralogix.EntryValue {
    get
  }
  public var metadata: Coralogix.EntryMetadata? {
    get
  }
  public init(key: Coralogix.EntryKey, value: Coralogix.EntryValue, metadata: Coralogix.EntryMetadata?)
  public static func < (lhs: Coralogix.Entry, rhs: Coralogix.Entry) -> Swift.Bool
  public static func == (a: Coralogix.Entry, b: Coralogix.Entry) -> Swift.Bool
}
public struct EntryKey : Swift.Equatable, Swift.Comparable, Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public init?(name: Swift.String)
  public static func < (lhs: Coralogix.EntryKey, rhs: Coralogix.EntryKey) -> Swift.Bool
  public static func == (a: Coralogix.EntryKey, b: Coralogix.EntryKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EntryMetadata : Swift.Equatable {
  public var metadata: Swift.String
  public init?(metadata: Swift.String?)
  public static func == (a: Coralogix.EntryMetadata, b: Coralogix.EntryMetadata) -> Swift.Bool
}
public struct EntryValue : Swift.Equatable {
  public var string: Swift.String {
    get
  }
  public init?(string: Swift.String)
  public static func == (a: Coralogix.EntryValue, b: Coralogix.EntryValue) -> Swift.Bool
}
public class JaegerBaggagePropagator : Coralogix.TextMapBaggagePropagator {
  public static let baggageHeader: Swift.String
  public static let baggagePrefix: Swift.String
  public var fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(baggage: any Coralogix.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any Coralogix.Baggage)? where G : Coralogix.Getter
  @objc deinit
}
public protocol TextMapBaggagePropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(baggage: any Coralogix.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any Coralogix.Baggage)? where G : Coralogix.Getter
}
public struct W3CBaggagePropagator : Coralogix.TextMapBaggagePropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(baggage: any Coralogix.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any Coralogix.Baggage)? where G : Coralogix.Getter
}
public class ZipkinBaggagePropagator : Coralogix.TextMapBaggagePropagator {
  public static let baggagePrefix: Swift.String
  final public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(baggage: any Coralogix.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any Coralogix.Baggage)? where G : Coralogix.Getter
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AttributeSet : Swift.Hashable, Swift.Codable {
  public var labels: [Swift.String : Coralogix.AttributeValue] {
    get
  }
  public static var empty: Coralogix.AttributeSet
  required public init(labels: [Swift.String : Coralogix.AttributeValue])
  public static func == (lhs: Coralogix.AttributeSet, rhs: Coralogix.AttributeSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AttributeValue : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  case stringArray([Swift.String])
  case boolArray([Swift.Bool])
  case intArray([Swift.Int])
  case doubleArray([Swift.Double])
  case set(Coralogix.AttributeSet)
  public var description: Swift.String {
    get
  }
  public init?(_ value: Any)
  public static func == (a: Coralogix.AttributeValue, b: Coralogix.AttributeValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Coralogix.AttributeValue {
  public init(_ value: Swift.String)
  public init(_ value: Swift.Bool)
  public init(_ value: Swift.Int)
  public init(_ value: Swift.Double)
  public init(_ value: [Swift.String])
  public init(_ value: [Swift.Int])
  public init(_ value: [Swift.Double])
  public init(_ value: Coralogix.AttributeSet)
}
extension Coralogix.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ContextManager : AnyObject {
  func getCurrentContextValue(forKey: Coralogix.OpenTelemetryContextKeys) -> Swift.AnyObject?
  func setCurrentContextValue(forKey: Coralogix.OpenTelemetryContextKeys, value: Swift.AnyObject)
  func removeContextValue(forKey: Coralogix.OpenTelemetryContextKeys, value: Swift.AnyObject)
}
public enum OpenTelemetryContextKeys : Swift.String {
  case span
  case baggage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OpenTelemetryContextProvider {
  public var activeSpan: (any Coralogix.Span)? {
    get
  }
  public var activeBaggage: (any Coralogix.Baggage)? {
    get
  }
  public func setActiveSpan(_ span: any Coralogix.Span)
  public func setActiveBaggage(_ baggage: any Coralogix.Baggage)
  public func removeContextForSpan(_ span: any Coralogix.Span)
  public func removeContextForBaggage(_ baggage: any Coralogix.Baggage)
}
public struct StringUtils {
  public static func isPrintableString(_ string: Swift.String) -> Swift.Bool
  public static func isValidMetricName(_ metricName: Swift.String) -> Swift.Bool
}
extension Swift.Double {
  public var toMilliseconds: Swift.UInt64 {
    get
  }
  public var toMicroseconds: Swift.UInt64 {
    get
  }
  public var toNanoseconds: Swift.UInt64 {
    get
  }
  public static func fromMilliseconds(_ millis: Swift.Int64) -> Foundation.TimeInterval
  public static func fromMicroseconds(_ micros: Swift.Int64) -> Foundation.TimeInterval
  public static func fromNanoseconds(_ nanos: Swift.Int64) -> Foundation.TimeInterval
}
@_hasMissingDesignatedInitializers public class DefaultLogger : Coralogix.Logger {
  public func eventBuilder(name: Swift.String) -> any Coralogix.EventBuilder
  public func logRecordBuilder() -> any Coralogix.LogRecordBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultLoggerProvider : Coralogix.LoggerProvider {
  public static let instance: any Coralogix.LoggerProvider
  public func get(instrumentationScopeName: Swift.String) -> any Coralogix.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any Coralogix.LoggerBuilder
  @objc deinit
}
public protocol EventBuilder : Coralogix.LogRecordBuilder {
  func setData(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
}
public protocol LogRecordBuilder {
  func setTimestamp(_ timestamp: Foundation.Date) -> Self
  func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  func setSpanContext(_ context: Coralogix.SpanContext) -> Self
  func setSeverity(_ severity: Coralogix.Severity) -> Self
  func setBody(_ body: Coralogix.AttributeValue) -> Self
  func setAttributes(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  func emit()
}
public protocol Logger {
  func eventBuilder(name: Swift.String) -> any Coralogix.EventBuilder
  func logRecordBuilder() -> any Coralogix.LogRecordBuilder
}
public protocol LoggerBuilder {
  func setEventDomain(_ eventDomain: Swift.String) -> Self
  func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  func setAttributes(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  func build() -> any Coralogix.Logger
}
public protocol LoggerProvider : AnyObject {
  func get(instrumentationScopeName: Swift.String) -> any Coralogix.Logger
  func loggerBuilder(instrumentationScopeName: Swift.String) -> any Coralogix.LoggerBuilder
}
public enum Severity : Swift.Int, Swift.Comparable, Swift.CustomStringConvertible, Swift.Codable {
  case trace, trace2, trace3, trace4, debug, debug2, debug3, debug4, info, info2, info3, info4, warn, warn2, warn3, warn4, error, error2, error3, error4, fatal, fatal2, fatal3, fatal4
  public var description: Swift.String {
    get
  }
  public static func < (lhs: Coralogix.Severity, rhs: Coralogix.Severity) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DefaultMeterProvider : Coralogix.MeterProvider {
  public static var instance: any Coralogix.MeterProvider
  public static func setDefault(meterFactory: any Coralogix.MeterProvider)
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any Coralogix.Meter
  @objc deinit
}
open class BoundMeasureMetric<T> {
  public init()
  open func record(value: T)
  @objc deinit
}
public protocol DoubleObserverMetric {
  func observe(value: Swift.Double, labelset: Coralogix.LabelSet)
  func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
public struct NoopDoubleObserverMetric : Coralogix.DoubleObserverMetric {
  public init()
  public func observe(value: Swift.Double, labelset: Coralogix.LabelSet)
  public func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
public protocol DoubleObserverMetricHandle {
  func observe(value: Swift.Double)
}
public protocol IntObserverMetric {
  func observe(value: Swift.Int, labelset: Coralogix.LabelSet)
  func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
public struct NoopIntObserverMetric : Coralogix.IntObserverMetric {
  public init()
  public func observe(value: Swift.Int, labelset: Coralogix.LabelSet)
  public func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
public protocol IntObserverMetricHandle {
  func observe(value: Swift.Int)
}
public protocol MeasureMetric {
  associatedtype T
  func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundMeasureMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundMeasureMetric<Self.T>
}
extension Coralogix.MeasureMetric {
  public func record(value: Self.T, labelset: Coralogix.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyMeasureMetric<T> : Coralogix.MeasureMetric {
  public init<U>(_ measurable: U) where T == U.T, U : Coralogix.MeasureMetric
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundMeasureMetric<T>
}
public struct NoopMeasureMetric<T> : Coralogix.MeasureMetric {
  public init()
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundMeasureMetric<T>
}
open class BoundHistogramMetric<T> {
  public init(explicitBoundaries: Swift.Array<T>? = nil)
  open func record(value: T)
  @objc deinit
}
public protocol HistogramMetric {
  associatedtype T
  func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundHistogramMetric<Self.T>
}
extension Coralogix.HistogramMetric {
  public func record(value: Self.T, labelset: Coralogix.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyHistogramMetric<T> : Coralogix.HistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : Coralogix.HistogramMetric
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundHistogramMetric<T>
}
public struct NoopHistogramMetric<T> : Coralogix.HistogramMetric {
  public init()
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundHistogramMetric<T>
}
open class BoundCounterMetric<T> {
  public init()
  open func add(value: T)
  @objc deinit
}
public protocol CounterMetric {
  associatedtype T
  func add(value: Self.T, labelset: Coralogix.LabelSet)
  func add(value: Self.T, labels: [Swift.String : Swift.String])
  func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundCounterMetric<Self.T>
}
public struct AnyCounterMetric<T> : Coralogix.CounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : Coralogix.CounterMetric
  public func add(value: T, labelset: Coralogix.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundCounterMetric<T>
}
public struct NoopCounterMetric<T> : Coralogix.CounterMetric {
  public init()
  public func add(value: T, labelset: Coralogix.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundCounterMetric<T>
}
@_hasMissingDesignatedInitializers open class LabelSet : Swift.Hashable {
  public var labels: [Swift.String : Swift.String] {
    get
  }
  public static var empty: Coralogix.LabelSet
  required public init(labels: [Swift.String : Swift.String])
  public static func == (lhs: Coralogix.LabelSet, rhs: Coralogix.LabelSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
public protocol Meter {
  func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> Coralogix.AnyCounterMetric<Swift.Int>
  func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> Coralogix.AnyCounterMetric<Swift.Double>
  func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> Coralogix.AnyMeasureMetric<Swift.Int>
  func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> Coralogix.AnyMeasureMetric<Swift.Double>
  func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>?, absolute: Swift.Bool) -> Coralogix.AnyHistogramMetric<Swift.Int>
  func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> Coralogix.AnyHistogramMetric<Swift.Double>
  func createRawDoubleHistogram(name: Swift.String) -> Coralogix.AnyRawHistogramMetric<Swift.Double>
  func createRawIntHistogram(name: Swift.String) -> Coralogix.AnyRawHistogramMetric<Swift.Int>
  func createRawDoubleCounter(name: Swift.String) -> Coralogix.AnyRawCounterMetric<Swift.Double>
  func createRawIntCounter(name: Swift.String) -> Coralogix.AnyRawCounterMetric<Swift.Int>
  func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any Coralogix.IntObserverMetric) -> Swift.Void) -> any Coralogix.IntObserverMetric
  func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any Coralogix.DoubleObserverMetric) -> Swift.Void) -> any Coralogix.DoubleObserverMetric
  func createIntObservableGauge(name: Swift.String, callback: @escaping (any Coralogix.IntObserverMetric) -> Swift.Void) -> any Coralogix.IntObserverMetric
  func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any Coralogix.DoubleObserverMetric) -> Swift.Void) -> any Coralogix.DoubleObserverMetric
  func getLabelSet(labels: [Swift.String : Swift.String]) -> Coralogix.LabelSet
}
extension Coralogix.Meter {
  public func createIntCounter(name: Swift.String) -> Coralogix.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String) -> Coralogix.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String) -> Coralogix.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String) -> Coralogix.AnyMeasureMetric<Swift.Double>
  public func createIntObserver(name: Swift.String, callback: @escaping (any Coralogix.IntObserverMetric) -> Swift.Void) -> any Coralogix.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, callback: @escaping (any Coralogix.DoubleObserverMetric) -> Swift.Void) -> any Coralogix.DoubleObserverMetric
}
public protocol MeterProvider : AnyObject {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any Coralogix.Meter
}
public struct ProxyMeter : Coralogix.Meter {
  public func createRawDoubleCounter(name: Swift.String) -> Coralogix.AnyRawCounterMetric<Swift.Double>
  public func createRawIntCounter(name: Swift.String) -> Coralogix.AnyRawCounterMetric<Swift.Int>
  public func createRawDoubleHistogram(name: Swift.String) -> Coralogix.AnyRawHistogramMetric<Swift.Double>
  public func createRawIntHistogram(name: Swift.String) -> Coralogix.AnyRawHistogramMetric<Swift.Int>
  public func getLabelSet(labels: [Swift.String : Swift.String]) -> Coralogix.LabelSet
  public func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> Coralogix.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> Coralogix.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> Coralogix.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> Coralogix.AnyMeasureMetric<Swift.Double>
  public func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>? = nil, absolute: Swift.Bool) -> Coralogix.AnyHistogramMetric<Swift.Int>
  public func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> Coralogix.AnyHistogramMetric<Swift.Double>
  public func createIntObservableGauge(name: Swift.String, callback: @escaping (any Coralogix.IntObserverMetric) -> Swift.Void) -> any Coralogix.IntObserverMetric
  public func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any Coralogix.DoubleObserverMetric) -> Swift.Void) -> any Coralogix.DoubleObserverMetric
  public func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any Coralogix.IntObserverMetric) -> Swift.Void) -> any Coralogix.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any Coralogix.DoubleObserverMetric) -> Swift.Void) -> any Coralogix.DoubleObserverMetric
}
open class BoundRawCounterMetric<T> {
  public init()
  open func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date)
  @objc deinit
}
open class BoundRawHistogramMetric<T> {
  public init()
  open func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T)
  @objc deinit
}
public protocol RawCounterMetric {
  associatedtype T
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: Coralogix.LabelSet)
  func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawCounterMetric<Self.T>
}
public struct AnyRawCounterMetric<T> : Coralogix.RawCounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : Coralogix.RawCounterMetric
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawCounterMetric<T>
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: Coralogix.LabelSet)
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
}
public struct NoopRawCounterMetric<T> : Coralogix.RawCounterMetric {
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: Coralogix.LabelSet)
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawCounterMetric<T>
}
public protocol RawHistogramMetric {
  associatedtype T
  func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawHistogramMetric<Self.T>
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labelset: Coralogix.LabelSet)
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyRawHistogramMetric<T> : Coralogix.RawHistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : Coralogix.RawHistogramMetric
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawHistogramMetric<T>
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: Coralogix.LabelSet)
}
public struct NoopRawHistogramMetric<T> : Coralogix.RawHistogramMetric {
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: Coralogix.LabelSet)
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public init()
  public func bind(labelset: Coralogix.LabelSet) -> Coralogix.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> Coralogix.BoundRawHistogramMetric<T>
}
@_hasMissingDesignatedInitializers public class DefaultStableMeter : Coralogix.StableMeter {
  public func counterBuilder(name: Swift.String) -> any Coralogix.LongCounterBuilder
  public func upDownCounterBuilder(name: Swift.String) -> any Coralogix.LongUpDownCounterBuilder
  public func histogramBuilder(name: Swift.String) -> any Coralogix.DoubleHistogramBuilder
  public func gaugeBuilder(name: Swift.String) -> any Coralogix.DoubleGaugeBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultStableMeterProvider : Coralogix.StableMeterProvider {
  public static func noop() -> any Coralogix.MeterBuilder
  public func get(name: Swift.String) -> any Coralogix.StableMeter
  public func meterBuilder(name: Swift.String) -> any Coralogix.MeterBuilder
  public static var instance: any Coralogix.StableMeterProvider
  @objc deinit
}
public protocol DoubleCounter {
  mutating func add(value: Swift.Double)
  mutating func add(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol DoubleCounterBuilder : AnyObject {
  func build() -> any Coralogix.DoubleCounter
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleCounter
}
public protocol DoubleGaugeBuilder : AnyObject {
  func ofLongs() -> any Coralogix.LongGaugeBuilder
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleGauge
}
public protocol DoubleHistogram {
  mutating func record(value: Swift.Double)
  mutating func record(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol DoubleHistogramBuilder : AnyObject {
  func ofLongs() -> any Coralogix.LongHistogramBuilder
  func build() -> any Coralogix.DoubleHistogram
}
public protocol DoubleUpDownCounter {
  mutating func add(value: Swift.Double)
  mutating func add(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol DoubleUpDownCounterBuilder : AnyObject {
  func build() -> any Coralogix.DoubleUpDownCounter
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleUpDownCounter
}
public protocol LongCounter {
  mutating func add(value: Swift.Int)
  mutating func add(value: Swift.Int, attribute: [Swift.String : Coralogix.AttributeValue])
}
public protocol LongCounterBuilder : AnyObject {
  func ofDoubles() -> any Coralogix.DoubleCounterBuilder
  func build() -> any Coralogix.LongCounter
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongCounter
}
public protocol LongGaugeBuilder : AnyObject {
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongGauge
}
public protocol LongHistogram {
  mutating func record(value: Swift.Int)
  mutating func record(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol LongHistogramBuilder : AnyObject {
  func build() -> any Coralogix.LongHistogram
}
public protocol LongUpDownCounter {
  mutating func add(value: Swift.Int)
  mutating func add(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol LongUpDownCounterBuilder : AnyObject {
  func ofDoubles() -> any Coralogix.DoubleUpDownCounterBuilder
  func build() -> any Coralogix.LongUpDownCounter
  func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongUpDownCounter
}
public protocol MeterBuilder : AnyObject {
  func setSchemaUrl(schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(instrumentationVersion: Swift.String) -> Self
  func build() -> any Coralogix.StableMeter
}
public protocol ObservableDoubleCounter {
  func close()
}
public protocol ObservableDoubleGauge {
  func close()
}
public protocol ObservableDoubleMeasurement {
  func record(value: Swift.Double)
  func record(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol ObservableDoubleUpDownCounter {
  func close()
}
public protocol ObservableLongCounter {
  func close()
}
public protocol ObservableLongGauge {
  func close()
}
public protocol ObservableLongMeasurement {
  func record(value: Swift.Int)
  func record(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
}
public protocol ObservableLongUpDownCounter {
  func close()
}
public protocol StableMeter {
  func counterBuilder(name: Swift.String) -> any Coralogix.LongCounterBuilder
  func upDownCounterBuilder(name: Swift.String) -> any Coralogix.LongUpDownCounterBuilder
  func histogramBuilder(name: Swift.String) -> any Coralogix.DoubleHistogramBuilder
  func gaugeBuilder(name: Swift.String) -> any Coralogix.DoubleGaugeBuilder
}
public protocol StableMeterProvider : AnyObject {
  func get(name: Swift.String) -> any Coralogix.StableMeter
  func meterBuilder(name: Swift.String) -> any Coralogix.MeterBuilder
}
public struct OpenTelemetry {
  public static var version: Swift.String
  public static var instance: Coralogix.OpenTelemetry
  public var tracerProvider: any Coralogix.TracerProvider {
    get
  }
  public var meterProvider: any Coralogix.MeterProvider {
    get
  }
  public var stableMeterProvider: (any Coralogix.StableMeterProvider)? {
    get
  }
  public var loggerProvider: any Coralogix.LoggerProvider {
    get
  }
  public var baggageManager: any Coralogix.BaggageManager {
    get
  }
  public var propagators: any Coralogix.ContextPropagators {
    get
  }
  public var contextProvider: Coralogix.OpenTelemetryContextProvider {
    get
  }
  public static func registerStableMeterProvider(meterProvider: any Coralogix.StableMeterProvider)
  public static func registerTracerProvider(tracerProvider: any Coralogix.TracerProvider)
  public static func registerMeterProvider(meterProvider: any Coralogix.MeterProvider)
  public static func registerLoggerProvider(loggerProvider: any Coralogix.LoggerProvider)
  public static func registerBaggageManager(baggageManager: any Coralogix.BaggageManager)
  public static func registerPropagators(textPropagators: [any Coralogix.TextMapPropagator], baggagePropagator: any Coralogix.TextMapBaggagePropagator)
  public static func registerContextManager(contextManager: any Coralogix.ContextManager)
}
public protocol ContextPropagators {
  var textMapPropagator: any Coralogix.TextMapPropagator { get }
  var textMapBaggagePropagator: any Coralogix.TextMapBaggagePropagator { get }
}
public struct DefaultContextPropagators : Coralogix.ContextPropagators {
  public var textMapPropagator: any Coralogix.TextMapPropagator
  public var textMapBaggagePropagator: any Coralogix.TextMapBaggagePropagator
  public init()
  public init(textPropagators: [any Coralogix.TextMapPropagator], baggagePropagator: any Coralogix.TextMapBaggagePropagator)
  public mutating func addTextMapPropagator(textFormat: any Coralogix.TextMapPropagator)
}
@_hasMissingDesignatedInitializers public class DefaultTracer : Coralogix.Tracer {
  public static var instance: Coralogix.DefaultTracer
  public func spanBuilder(spanName: Swift.String) -> any Coralogix.SpanBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracerProvider : Coralogix.TracerProvider {
  public static let instance: Coralogix.DefaultTracerProvider
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any Coralogix.Tracer
  @objc deinit
}
public class B3Propagator : Coralogix.TextMapPropagator {
  final public let fields: Swift.Set<Swift.String>
  public init()
  public init(_ singleHeaderInjection: Swift.Bool)
  public func inject<S>(spanContext: Coralogix.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> Coralogix.SpanContext? where G : Coralogix.Getter
  @objc deinit
}
public protocol BinaryFormattable {
  func fromByteArray(bytes: [Swift.UInt8]) -> Coralogix.SpanContext?
  func toByteArray(spanContext: Coralogix.SpanContext) -> [Swift.UInt8]
}
public class JaegerPropagator : Coralogix.TextMapPropagator {
  public var fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: Coralogix.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> Coralogix.SpanContext? where G : Coralogix.Getter
  @objc deinit
}
public protocol TextMapPropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(spanContext: Coralogix.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> Coralogix.SpanContext? where G : Coralogix.Getter
}
public protocol Setter {
  func set(carrier: inout [Swift.String : Swift.String], key: Swift.String, value: Swift.String)
}
public protocol Getter {
  func get(carrier: [Swift.String : Swift.String], key: Swift.String) -> [Swift.String]?
}
public struct W3CTraceContextPropagator : Coralogix.TextMapPropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(spanContext: Coralogix.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> Coralogix.SpanContext? where G : Coralogix.Getter
}
public enum SemanticAttributes : Swift.String {
  case clientAddress
  case clientPort
  case clientSocketAddress
  case clientSocketPort
  case httpMethod
  case httpStatusCode
  case httpScheme
  case httpUrl
  case httpTarget
  case httpRequestContentLength
  case httpResponseContentLength
  case netSockPeerName
  case netSockPeerAddr
  case netSockPeerPort
  case netPeerName
  case netPeerPort
  case netHostName
  case netHostPort
  case netSockHostAddr
  case netSockHostPort
  case netTransport
  case netProtocolName
  case netProtocolVersion
  case netSockFamily
  case destinationDomain
  case destinationAddress
  case destinationPort
  case exceptionType
  case exceptionMessage
  case exceptionStacktrace
  case httpRequestMethod
  case httpResponseStatusCode
  case networkProtocolName
  case networkProtocolVersion
  case serverAddress
  case serverPort
  case httpRoute
  case urlScheme
  case eventName
  case eventDomain
  case logRecordUid
  case featureFlagKey
  case featureFlagProviderName
  case featureFlagVariant
  case logIostream
  case logFileName
  case logFilePath
  case logFileNameResolved
  case logFilePathResolved
  case serverSocketAddress
  case pool
  case type
  case serverSocketDomain
  case serverSocketPort
  case sourceDomain
  case sourceAddress
  case sourcePort
  case awsLambdaInvokedArn
  case cloudeventsEventId
  case cloudeventsEventSource
  case cloudeventsEventSpecVersion
  case cloudeventsEventType
  case cloudeventsEventSubject
  case opentracingRefType
  case dbSystem
  case dbConnectionString
  case dbUser
  case dbJdbcDriverClassname
  case dbName
  case dbStatement
  case dbOperation
  case networkTransport
  case networkType
  case dbMssqlInstanceName
  case dbCassandraPageSize
  case dbCassandraConsistencyLevel
  case dbCassandraTable
  case dbCassandraIdempotence
  case dbCassandraSpeculativeExecutionCount
  case dbCassandraCoordinatorId
  case dbCassandraCoordinatorDc
  case dbRedisDatabaseIndex
  case dbMongodbCollection
  case urlFull
  case dbSqlTable
  case dbCosmosdbClientId
  case dbCosmosdbOperationType
  case userAgentOriginal
  case dbCosmosdbConnectionMode
  case dbCosmosdbContainer
  case dbCosmosdbRequestContentLength
  case dbCosmosdbStatusCode
  case dbCosmosdbSubStatusCode
  case dbCosmosdbRequestCharge
  case otelStatusCode
  case otelStatusDescription
  case faasTrigger
  case faasInvocationId
  case cloudResourceId
  case faasDocumentCollection
  case faasDocumentOperation
  case faasDocumentTime
  case faasDocumentName
  case urlPath
  case urlQuery
  case messagingSystem
  case messagingOperation
  case messagingBatchMessageCount
  case messagingClientId
  case messagingDestinationName
  case messagingDestinationTemplate
  case messagingDestinationTemporary
  case messagingDestinationAnonymous
  case messagingMessageId
  case messagingMessageConversationId
  case messagingMessagePayloadSizeBytes
  case messagingMessagePayloadCompressedSizeBytes
  case faasTime
  case faasCron
  case faasColdstart
  case faasInvokedName
  case faasInvokedProvider
  case faasInvokedRegion
  case networkConnectionType
  case networkConnectionSubtype
  case networkCarrierName
  case networkCarrierMcc
  case networkCarrierMnc
  case networkCarrierIcc
  case peerService
  case enduserId
  case enduserRole
  case enduserScope
  case threadId
  case threadName
  case codeFunction
  case codeNamespace
  case codeFilepath
  case codeLineno
  case codeColumn
  case httpRequestMethodOriginal
  case httpRequestBodySize
  case httpResponseBodySize
  case httpResendCount
  case rpcSystem
  case rpcService
  case rpcMethod
  case awsRequestId
  case awsDynamodbTableNames
  case awsDynamodbConsumedCapacity
  case awsDynamodbItemCollectionMetrics
  case awsDynamodbProvisionedReadCapacity
  case awsDynamodbProvisionedWriteCapacity
  case awsDynamodbConsistentRead
  case awsDynamodbProjection
  case awsDynamodbLimit
  case awsDynamodbAttributesToGet
  case awsDynamodbIndexName
  case awsDynamodbSelect
  case awsDynamodbGlobalSecondaryIndexes
  case awsDynamodbLocalSecondaryIndexes
  case awsDynamodbExclusiveStartTable
  case awsDynamodbTableCount
  case awsDynamodbScanForward
  case awsDynamodbSegment
  case awsDynamodbTotalSegments
  case awsDynamodbCount
  case awsDynamodbScannedCount
  case awsDynamodbAttributeDefinitions
  case awsDynamodbGlobalSecondaryIndexUpdates
  case awsS3Bucket
  case awsS3Key
  case awsS3CopySource
  case awsS3UploadId
  case awsS3Delete
  case awsS3PartNumber
  case graphqlOperationName
  case graphqlOperationType
  case graphqlDocument
  case messagingRabbitmqDestinationRoutingKey
  case messagingKafkaMessageKey
  case messagingKafkaConsumerGroup
  case messagingKafkaDestinationPartition
  case messagingKafkaMessageOffset
  case messagingKafkaMessageTombstone
  case messagingRocketmqNamespace
  case messagingRocketmqClientGroup
  case messagingRocketmqMessageDeliveryTimestamp
  case messagingRocketmqMessageDelayTimeLevel
  case messagingRocketmqMessageGroup
  case messagingRocketmqMessageType
  case messagingRocketmqMessageTag
  case messagingRocketmqMessageKeys
  case messagingRocketmqConsumptionModel
  case rpcGrpcStatusCode
  case rpcJsonrpcVersion
  case rpcJsonrpcRequestId
  case rpcJsonrpcErrorCode
  case rpcJsonrpcErrorMessage
  case messageType
  case messageId
  case messageCompressedSize
  case messageUncompressedSize
  case rpcConnectRpcErrorCode
  case exceptionEscaped
  case urlFragment
  case exception
  public struct NetTransportValues : Swift.CustomStringConvertible {
    public static let ipTcp: Coralogix.SemanticAttributes.NetTransportValues
    public static let ipUdp: Coralogix.SemanticAttributes.NetTransportValues
    public static let pipe: Coralogix.SemanticAttributes.NetTransportValues
    public static let inproc: Coralogix.SemanticAttributes.NetTransportValues
    public static let other: Coralogix.SemanticAttributes.NetTransportValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetSockFamilyValues : Swift.CustomStringConvertible {
    public static let inet: Coralogix.SemanticAttributes.NetSockFamilyValues
    public static let inet6: Coralogix.SemanticAttributes.NetSockFamilyValues
    public static let unix: Coralogix.SemanticAttributes.NetSockFamilyValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct HttpRequestMethodValues : Swift.CustomStringConvertible {
    public static let connect: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let delete: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let get: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let head: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let options: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let patch: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let post: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let put: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let trace: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public static let other: Coralogix.SemanticAttributes.HttpRequestMethodValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct EventDomainValues : Swift.CustomStringConvertible {
    public static let browser: Coralogix.SemanticAttributes.EventDomainValues
    public static let device: Coralogix.SemanticAttributes.EventDomainValues
    public static let k8s: Coralogix.SemanticAttributes.EventDomainValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum LogIostreamValues : Swift.String {
    case stdout
    case stderr
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum TypeValues : Swift.String {
    case heap
    case non_heap
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OpentracingRefTypeValues : Swift.String {
    case child_of
    case follows_from
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DbSystemValues : Swift.CustomStringConvertible {
    public static let otherSql: Coralogix.SemanticAttributes.DbSystemValues
    public static let mssql: Coralogix.SemanticAttributes.DbSystemValues
    public static let mssqlcompact: Coralogix.SemanticAttributes.DbSystemValues
    public static let mysql: Coralogix.SemanticAttributes.DbSystemValues
    public static let oracle: Coralogix.SemanticAttributes.DbSystemValues
    public static let db2: Coralogix.SemanticAttributes.DbSystemValues
    public static let postgresql: Coralogix.SemanticAttributes.DbSystemValues
    public static let redshift: Coralogix.SemanticAttributes.DbSystemValues
    public static let hive: Coralogix.SemanticAttributes.DbSystemValues
    public static let cloudscape: Coralogix.SemanticAttributes.DbSystemValues
    public static let hsqldb: Coralogix.SemanticAttributes.DbSystemValues
    public static let progress: Coralogix.SemanticAttributes.DbSystemValues
    public static let maxdb: Coralogix.SemanticAttributes.DbSystemValues
    public static let hanadb: Coralogix.SemanticAttributes.DbSystemValues
    public static let ingres: Coralogix.SemanticAttributes.DbSystemValues
    public static let firstsql: Coralogix.SemanticAttributes.DbSystemValues
    public static let edb: Coralogix.SemanticAttributes.DbSystemValues
    public static let cache: Coralogix.SemanticAttributes.DbSystemValues
    public static let adabas: Coralogix.SemanticAttributes.DbSystemValues
    public static let firebird: Coralogix.SemanticAttributes.DbSystemValues
    public static let derby: Coralogix.SemanticAttributes.DbSystemValues
    public static let filemaker: Coralogix.SemanticAttributes.DbSystemValues
    public static let informix: Coralogix.SemanticAttributes.DbSystemValues
    public static let instantdb: Coralogix.SemanticAttributes.DbSystemValues
    public static let interbase: Coralogix.SemanticAttributes.DbSystemValues
    public static let mariadb: Coralogix.SemanticAttributes.DbSystemValues
    public static let netezza: Coralogix.SemanticAttributes.DbSystemValues
    public static let pervasive: Coralogix.SemanticAttributes.DbSystemValues
    public static let pointbase: Coralogix.SemanticAttributes.DbSystemValues
    public static let sqlite: Coralogix.SemanticAttributes.DbSystemValues
    public static let sybase: Coralogix.SemanticAttributes.DbSystemValues
    public static let teradata: Coralogix.SemanticAttributes.DbSystemValues
    public static let vertica: Coralogix.SemanticAttributes.DbSystemValues
    public static let h2: Coralogix.SemanticAttributes.DbSystemValues
    public static let coldfusion: Coralogix.SemanticAttributes.DbSystemValues
    public static let cassandra: Coralogix.SemanticAttributes.DbSystemValues
    public static let hbase: Coralogix.SemanticAttributes.DbSystemValues
    public static let mongodb: Coralogix.SemanticAttributes.DbSystemValues
    public static let redis: Coralogix.SemanticAttributes.DbSystemValues
    public static let couchbase: Coralogix.SemanticAttributes.DbSystemValues
    public static let couchdb: Coralogix.SemanticAttributes.DbSystemValues
    public static let cosmosdb: Coralogix.SemanticAttributes.DbSystemValues
    public static let dynamodb: Coralogix.SemanticAttributes.DbSystemValues
    public static let neo4j: Coralogix.SemanticAttributes.DbSystemValues
    public static let geode: Coralogix.SemanticAttributes.DbSystemValues
    public static let elasticsearch: Coralogix.SemanticAttributes.DbSystemValues
    public static let memcached: Coralogix.SemanticAttributes.DbSystemValues
    public static let cockroachdb: Coralogix.SemanticAttributes.DbSystemValues
    public static let opensearch: Coralogix.SemanticAttributes.DbSystemValues
    public static let clickhouse: Coralogix.SemanticAttributes.DbSystemValues
    public static let spanner: Coralogix.SemanticAttributes.DbSystemValues
    public static let trino: Coralogix.SemanticAttributes.DbSystemValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetworkTransportValues : Swift.CustomStringConvertible {
    public static let tcp: Coralogix.SemanticAttributes.NetworkTransportValues
    public static let udp: Coralogix.SemanticAttributes.NetworkTransportValues
    public static let pipe: Coralogix.SemanticAttributes.NetworkTransportValues
    public static let unix: Coralogix.SemanticAttributes.NetworkTransportValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetworkTypeValues : Swift.CustomStringConvertible {
    public static let ipv4: Coralogix.SemanticAttributes.NetworkTypeValues
    public static let ipv6: Coralogix.SemanticAttributes.NetworkTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum DbCassandraConsistencyLevelValues : Swift.String {
    case all
    case each_quorum
    case quorum
    case local_quorum
    case one
    case two
    case three
    case local_one
    case any
    case serial
    case local_serial
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DbCosmosdbOperationTypeValues : Swift.CustomStringConvertible {
    public static let invalid: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let create: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let patch: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let read: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let readFeed: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let delete: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let replace: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let execute: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let query: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let head: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let headFeed: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let upsert: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let batch: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let queryPlan: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let executeJavascript: Coralogix.SemanticAttributes.DbCosmosdbOperationTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum DbCosmosdbConnectionModeValues : Swift.String {
    case gateway
    case direct
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OtelStatusCodeValues : Swift.String {
    case ok
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FaasTriggerValues : Swift.String {
    case datasource
    case http
    case pubsub
    case timer
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct FaasDocumentOperationValues : Swift.CustomStringConvertible {
    public static let insert: Coralogix.SemanticAttributes.FaasDocumentOperationValues
    public static let edit: Coralogix.SemanticAttributes.FaasDocumentOperationValues
    public static let delete: Coralogix.SemanticAttributes.FaasDocumentOperationValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct MessagingOperationValues : Swift.CustomStringConvertible {
    public static let publish: Coralogix.SemanticAttributes.MessagingOperationValues
    public static let receive: Coralogix.SemanticAttributes.MessagingOperationValues
    public static let process: Coralogix.SemanticAttributes.MessagingOperationValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct FaasInvokedProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: Coralogix.SemanticAttributes.FaasInvokedProviderValues
    public static let aws: Coralogix.SemanticAttributes.FaasInvokedProviderValues
    public static let azure: Coralogix.SemanticAttributes.FaasInvokedProviderValues
    public static let gcp: Coralogix.SemanticAttributes.FaasInvokedProviderValues
    public static let tencentCloud: Coralogix.SemanticAttributes.FaasInvokedProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetworkConnectionTypeValues : Swift.CustomStringConvertible {
    public static let wifi: Coralogix.SemanticAttributes.NetworkConnectionTypeValues
    public static let wired: Coralogix.SemanticAttributes.NetworkConnectionTypeValues
    public static let cell: Coralogix.SemanticAttributes.NetworkConnectionTypeValues
    public static let unavailable: Coralogix.SemanticAttributes.NetworkConnectionTypeValues
    public static let unknown: Coralogix.SemanticAttributes.NetworkConnectionTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetworkConnectionSubtypeValues : Swift.CustomStringConvertible {
    public static let gprs: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let edge: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let umts: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let cdma: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let evdo0: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let evdoA: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let cdma20001xrtt: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let hsdpa: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let hsupa: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let hspa: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let iden: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let evdoB: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let lte: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let ehrpd: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let hspap: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let gsm: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let tdScdma: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let iwlan: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let nr: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let nrnsa: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public static let lteCa: Coralogix.SemanticAttributes.NetworkConnectionSubtypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct RpcSystemValues : Swift.CustomStringConvertible {
    public static let grpc: Coralogix.SemanticAttributes.RpcSystemValues
    public static let javaRmi: Coralogix.SemanticAttributes.RpcSystemValues
    public static let dotnetWcf: Coralogix.SemanticAttributes.RpcSystemValues
    public static let apacheDubbo: Coralogix.SemanticAttributes.RpcSystemValues
    public static let connectRpc: Coralogix.SemanticAttributes.RpcSystemValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum GraphqlOperationTypeValues : Swift.String {
    case query
    case mutation
    case subscription
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MessagingRocketmqMessageTypeValues : Swift.String {
    case normal
    case fifo
    case delay
    case transaction
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MessagingRocketmqConsumptionModelValues : Swift.String {
    case clustering
    case broadcasting
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RpcGrpcStatusCodeValues : Swift.Int {
    case ok
    case cancelled
    case unknown
    case invalid_argument
    case deadline_exceeded
    case not_found
    case already_exists
    case permission_denied
    case resource_exhausted
    case failed_precondition
    case aborted
    case out_of_range
    case unimplemented
    case `internal`
    case unavailable
    case data_loss
    case unauthenticated
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum MessageTypeValues : Swift.String {
    case sent
    case received
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RpcConnectRpcErrorCodeValues : Swift.String {
    case cancelled
    case unknown
    case invalid_argument
    case deadline_exceeded
    case not_found
    case already_exists
    case permission_denied
    case resource_exhausted
    case failed_precondition
    case aborted
    case out_of_range
    case unimplemented
    case `internal`
    case unavailable
    case data_loss
    case unauthenticated
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Span : AnyObject, Swift.CustomStringConvertible {
  var kind: Coralogix.SpanKind { get }
  var context: Coralogix.SpanContext { get }
  var isRecording: Swift.Bool { get }
  var status: Coralogix.Status { get set }
  var name: Swift.String { get set }
  func setAttribute(key: Swift.String, value: Coralogix.AttributeValue?)
  func addEvent(name: Swift.String)
  func addEvent(name: Swift.String, timestamp: Foundation.Date)
  func addEvent(name: Swift.String, attributes: [Swift.String : Coralogix.AttributeValue])
  func addEvent(name: Swift.String, attributes: [Swift.String : Coralogix.AttributeValue], timestamp: Foundation.Date)
  func end()
  func end(time: Foundation.Date)
}
extension Coralogix.Span {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: any Coralogix.Span, rhs: any Coralogix.Span) -> Swift.Bool
}
extension Coralogix.Span {
  public func setAttribute(key: Swift.String, value: Swift.String)
  public func setAttribute(key: Swift.String, value: Swift.Int)
  public func setAttribute(key: Swift.String, value: Swift.Double)
  public func setAttribute(key: Swift.String, value: Swift.Bool)
  public func setAttribute(key: Coralogix.SemanticAttributes, value: Swift.String)
  public func setAttribute(key: Coralogix.SemanticAttributes, value: Swift.Int)
  public func setAttribute(key: Coralogix.SemanticAttributes, value: Swift.Double)
  public func setAttribute(key: Coralogix.SemanticAttributes, value: Swift.Bool)
}
extension Coralogix.Span {
  public func putHttpHostAttribute(string hostName: Swift.String, int port: Swift.Int)
  public func putHttpStatusCode(statusCode: Swift.Int, reasonPhrase: Swift.String)
}
public protocol SpanBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: any Coralogix.Span) -> Self
  @discardableResult
  func setParent(_ parent: Coralogix.SpanContext) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func addLink(spanContext: Coralogix.SpanContext) -> Self
  @discardableResult
  func addLink(spanContext: Coralogix.SpanContext, attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Coralogix.AttributeValue) -> Self
  @discardableResult
  func setSpanKind(spanKind: Coralogix.SpanKind) -> Self
  @discardableResult
  func setStartTime(time: Foundation.Date) -> Self
  @discardableResult
  func setActive(_ active: Swift.Bool) -> Self
  func startSpan() -> any Coralogix.Span
}
extension Coralogix.SpanBuilder {
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
}
public struct SpanContext : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable, Swift.Codable {
  public var traceId: Coralogix.TraceId {
    get
  }
  public var spanId: Coralogix.SpanId {
    get
  }
  public var traceFlags: Coralogix.TraceFlags {
    get
  }
  public var traceState: Coralogix.TraceState
  public let isRemote: Swift.Bool
  public static func create(traceId: Coralogix.TraceId, spanId: Coralogix.SpanId, traceFlags: Coralogix.TraceFlags, traceState: Coralogix.TraceState) -> Coralogix.SpanContext
  public static func createFromRemoteParent(traceId: Coralogix.TraceId, spanId: Coralogix.SpanId, traceFlags: Coralogix.TraceFlags, traceState: Coralogix.TraceState) -> Coralogix.SpanContext
  public var isValid: Swift.Bool {
    get
  }
  public var isSampled: Swift.Bool {
    get
  }
  public static func == (lhs: Coralogix.SpanContext, rhs: Coralogix.SpanContext) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SpanId : Swift.Equatable, Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: Coralogix.SpanId
  public static func getSize() -> Swift.Int
  public init(id: Swift.UInt64)
  public init()
  public static func random() -> Coralogix.SpanId
  public init(fromBytes bytes: Swift.Array<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>, withOffset offset: Swift.Int = 0)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.Array<Swift.UInt8>, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var hexString: Swift.String {
    get
  }
  public var rawValue: Swift.UInt64 {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: Coralogix.SpanId, rhs: Coralogix.SpanId) -> Swift.Bool
  public static func == (lhs: Coralogix.SpanId, rhs: Coralogix.SpanId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum SpanKind : Swift.String, Swift.Equatable, Swift.Codable {
  case `internal`
  case server
  case client
  case producer
  case consumer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Status : Swift.Equatable {
  case ok
  case unset
  case error(description: Swift.String)
  public var isOk: Swift.Bool {
    get
  }
  public var isError: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public static func == (a: Coralogix.Status, b: Coralogix.Status) -> Swift.Bool
}
extension Coralogix.Status : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Coralogix.Status : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceFlags : Swift.Equatable, Swift.CustomStringConvertible, Swift.Codable {
  public var byte: Swift.UInt8 {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public init()
  public init(fromByte src: Swift.UInt8)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var sampled: Swift.Bool {
    get
  }
  public mutating func setIsSampled(_ isSampled: Swift.Bool)
  public func settingIsSampled(_ isSampled: Swift.Bool) -> Coralogix.TraceFlags
  public var description: Swift.String {
    get
  }
  public static func == (a: Coralogix.TraceFlags, b: Coralogix.TraceFlags) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceId : Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Equatable, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: Coralogix.TraceId
  public var idHi: Swift.UInt64 {
    get
  }
  public var idLo: Swift.UInt64 {
    get
  }
  public init(idHi: Swift.UInt64, idLo: Swift.UInt64)
  public init()
  public static func random() -> Coralogix.TraceId
  public init(fromData data: Foundation.Data)
  public init(fromBytes bytes: [Swift.UInt8])
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout [Swift.UInt8], destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var isValid: Swift.Bool {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public var rawHigherLong: Swift.UInt64 {
    get
  }
  public var rawLowerLong: Swift.UInt64 {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: Coralogix.TraceId, rhs: Coralogix.TraceId) -> Swift.Bool
  public static func == (lhs: Coralogix.TraceId, rhs: Coralogix.TraceId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceState : Swift.Equatable, Swift.Codable {
  public var entries: [Coralogix.TraceState.Entry] {
    get
  }
  public init()
  public init?(entries: [Coralogix.TraceState.Entry])
  public func get(key: Swift.String) -> Swift.String?
  public func setting(key: Swift.String, value: Swift.String) -> Coralogix.TraceState
  public func removing(key: Swift.String) -> Coralogix.TraceState
  public struct Entry : Swift.Equatable, Swift.Codable {
    public var key: Swift.String {
      get
    }
    public var value: Swift.String {
      get
    }
    public init?(key: Swift.String, value: Swift.String)
    public static func == (a: Coralogix.TraceState.Entry, b: Coralogix.TraceState.Entry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: Coralogix.TraceState, b: Coralogix.TraceState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Tracer : AnyObject {
  func spanBuilder(spanName: Swift.String) -> any Coralogix.SpanBuilder
}
public protocol TracerProvider {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any Coralogix.Tracer
}
public protocol Clock : AnyObject {
  var now: Foundation.Date { get }
}
extension Coralogix.Clock {
  public var nanoTime: Swift.UInt64 {
    get
  }
}
public func == (lhs: any Coralogix.Clock, rhs: any Coralogix.Clock) -> Swift.Bool
public enum ExportResult {
  case success
  case failure
  public static func == (a: Coralogix.ExportResult, b: Coralogix.ExportResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct InstrumentationScopeInfo : Swift.Hashable, Swift.Codable, Swift.Equatable {
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var schemaUrl: Swift.String? {
    get
  }
  public init()
  public init(name: Swift.String, version: Swift.String? = nil, schemaUrl: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Coralogix.InstrumentationScopeInfo, b: Coralogix.InstrumentationScopeInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public class MillisClock : Coralogix.Clock {
  public init()
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public class MonotonicClock : Coralogix.Clock {
  public init(clock: any Coralogix.Clock)
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public struct ReadableLogRecord : Swift.Codable {
  public init(resource: Coralogix.Resource, instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo, timestamp: Foundation.Date, observedTimestamp: Foundation.Date? = nil, spanContext: Coralogix.SpanContext? = nil, severity: Coralogix.Severity? = nil, body: Coralogix.AttributeValue? = nil, attributes: [Swift.String : Coralogix.AttributeValue])
  public var resource: Coralogix.Resource {
    get
  }
  public var instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo {
    get
  }
  public var timestamp: Foundation.Date {
    get
  }
  public var observedTimestamp: Foundation.Date? {
    get
  }
  public var spanContext: Coralogix.SpanContext? {
    get
  }
  public var severity: Coralogix.Severity? {
    get
  }
  public var body: Coralogix.AttributeValue? {
    get
  }
  public var attributes: [Swift.String : Coralogix.AttributeValue] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class InMemoryLogRecordExporter : Coralogix.LogRecordExporter {
  public func getFinishedLogRecords() -> [Coralogix.ReadableLogRecord]
  public func export(logRecords: [Coralogix.ReadableLogRecord], explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
public protocol LogRecordExporter {
  func export(logRecords: [Coralogix.ReadableLogRecord], explicitTimeout: Foundation.TimeInterval?) -> Coralogix.ExportResult
  func shutdown(explicitTimeout: Foundation.TimeInterval?)
  func forceFlush(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.ExportResult
}
extension Coralogix.LogRecordExporter {
  public func export(logRecords: [Coralogix.ReadableLogRecord]) -> Coralogix.ExportResult
  public func shutdown()
  public func forceFlush() -> Coralogix.ExportResult
}
public class MultiLogRecordExporter : Coralogix.LogRecordExporter {
  public init(logRecordExporters: [any Coralogix.LogRecordExporter])
  public func export(logRecords: [Coralogix.ReadableLogRecord], explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoopLogRecordExporter : Coralogix.LogRecordExporter {
  public static let instance: Coralogix.NoopLogRecordExporter
  public func export(logRecords: [Coralogix.ReadableLogRecord], explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
public struct LogLimits {
  public static let defaultMaxAttributeCount: Swift.Int
  public static let defaultMaxAttributeLength: Swift.Int
  public let maxAttributeCount: Swift.Int
  public let maxAttributeLength: Swift.Int
  public init(maxAttributeCount: Swift.Int = Self.defaultMaxAttributeCount, maxAttributeLength: Swift.Int = Self.defaultMaxAttributeLength)
}
@_hasMissingDesignatedInitializers public class LogRecordBuilderSdk : Coralogix.EventBuilder {
  public func setTimestamp(_ timestamp: Foundation.Date) -> Self
  public func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  public func setSpanContext(_ context: Coralogix.SpanContext) -> Self
  public func setSeverity(_ severity: Coralogix.Severity) -> Self
  public func setBody(_ body: Coralogix.AttributeValue) -> Self
  public func setAttributes(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  public func setData(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  public func emit()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LoggerBuilderSdk : Coralogix.LoggerBuilder {
  public func setEventDomain(_ eventDomain: Swift.String) -> Self
  public func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  public func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  public func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  public func setAttributes(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Self
  public func build() -> any Coralogix.Logger
  @objc deinit
}
public class LoggerProviderBuilder {
  public var clock: any Coralogix.Clock {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var logLimits: Coralogix.LogLimits {
    get
  }
  public var logProcessors: [any Coralogix.LogRecordProcessor] {
    get
  }
  public init()
  public func with(clock: any Coralogix.Clock) -> Self
  public func with(resource: Coralogix.Resource) -> Self
  public func with(logLimits: Coralogix.LogLimits) -> Self
  public func with(processors: [any Coralogix.LogRecordProcessor]) -> Self
  public func build() -> Coralogix.LoggerProviderSdk
  @objc deinit
}
public class LoggerProviderSdk : Coralogix.LoggerProvider {
  public init(clock: any Coralogix.Clock = MillisClock(), resource: Coralogix.Resource = EnvVarResource.get(), logLimits: Coralogix.LogLimits = LogLimits(), logRecordProcessors: [any Coralogix.LogRecordProcessor] = [])
  public func get(instrumentationScopeName: Swift.String) -> any Coralogix.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any Coralogix.LoggerBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LoggerSdk : Coralogix.Logger {
  public func eventBuilder(name: Swift.String) -> any Coralogix.EventBuilder
  public func logRecordBuilder() -> any Coralogix.LogRecordBuilder
  @objc deinit
}
public class BatchLogRecordProcessor : Coralogix.LogRecordProcessor {
  public init(logRecordExporter: any Coralogix.LogRecordExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [Coralogix.ReadableLogRecord]) -> Swift.Void)? = nil)
  public func onEmit(logRecord: Coralogix.ReadableLogRecord)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.ExportResult
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
public protocol LogRecordProcessor {
  func onEmit(logRecord: Coralogix.ReadableLogRecord)
  func forceFlush(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.ExportResult
  func shutdown(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.ExportResult
}
extension Coralogix.LogRecordProcessor {
  public func forceFlush() -> Coralogix.ExportResult
  public func shutdown() -> Coralogix.ExportResult
}
public class MultiLogRecordProcessor : Coralogix.LogRecordProcessor {
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public init(logRecordProcessors: [any Coralogix.LogRecordProcessor])
  public func onEmit(logRecord: Coralogix.ReadableLogRecord)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoopLogRecordProcessor : Coralogix.LogRecordProcessor {
  public static let noopLogRecordProcessor: Coralogix.NoopLogRecordProcessor
  public func onEmit(logRecord: Coralogix.ReadableLogRecord)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
public class SimpleLogRecordProcessor : Coralogix.LogRecordProcessor {
  public init(logRecordExporter: any Coralogix.LogRecordExporter)
  public func onEmit(logRecord: Coralogix.ReadableLogRecord)
  public func forceFlush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.ExportResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Aggregator<T> {
  public func update(value: T)
  public func checkpoint()
  public func toMetricData() -> any Coralogix.MetricData
  public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CounterSumAggregator<T> : Coralogix.Aggregator<T> where T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any Coralogix.MetricData
  override public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HistogramAggregator<T> : Coralogix.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  public init(explicitBoundaries: Swift.Array<T>? = nil) throws
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any Coralogix.MetricData
  override public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LastValueAggregator<T> : Coralogix.Aggregator<T> where T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any Coralogix.MetricData
  override public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MaxValueAggregator<T> : Coralogix.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any Coralogix.MetricData
  override public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeasureMinMaxSumCountAggregator<T> : Coralogix.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any Coralogix.MetricData
  override public func getAggregationType() -> Coralogix.AggregationType
  @objc deinit
}
public enum AggregationType : Swift.String, Swift.Codable {
  case intGauge
  case doubleGauge
  case doubleSum
  case intSum
  case doubleSummary
  case intSummary
  case doubleHistogram
  case intHistogram
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Metric {
  public var namespace: Swift.String {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var aggregationType: Coralogix.AggregationType {
    get
  }
  public var data: [any Coralogix.MetricData] {
    get
  }
}
extension Coralogix.Metric : Swift.Equatable {
  public static func == (lhs: Coralogix.Metric, rhs: Coralogix.Metric) -> Swift.Bool
}
extension Coralogix.Metric : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol MetricData {
  var startTimestamp: Foundation.Date { get set }
  var timestamp: Foundation.Date { get set }
  var labels: [Swift.String : Swift.String] { get set }
}
public struct NoopMetricData : Coralogix.MetricData {
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
}
public struct SumData<T> : Coralogix.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), sum: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var sum: T
}
public struct SummaryData<T> : Coralogix.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), count: Swift.Int, sum: T, min: T, max: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var count: Swift.Int
  public var sum: T
  public var min: T
  public var max: T
}
public struct HistogramData<T> : Coralogix.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), buckets: (boundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>), count: Swift.Int, sum: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var buckets: (boundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>)
  public var count: Swift.Int
  public var sum: T
}
extension Coralogix.NoopMetricData : Swift.Equatable, Swift.Codable {
  public static func == (a: Coralogix.NoopMetricData, b: Coralogix.NoopMetricData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Coralogix.SumData : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: Coralogix.SumData<T>, b: Coralogix.SumData<T>) -> Swift.Bool
}
extension Coralogix.SumData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Coralogix.SummaryData : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: Coralogix.SummaryData<T>, b: Coralogix.SummaryData<T>) -> Swift.Bool
}
extension Coralogix.SummaryData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Coralogix.HistogramData : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: Coralogix.HistogramData<T>, rhs: Coralogix.HistogramData<T>) -> Swift.Bool
}
extension Coralogix.HistogramData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum MetricExporterResultCode {
  case success
  case failureNotRetryable
  case failureRetryable
  public static func == (a: Coralogix.MetricExporterResultCode, b: Coralogix.MetricExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MetricExporter {
  func export(metrics: [Coralogix.Metric], shouldCancel: (() -> Swift.Bool)?) -> Coralogix.MetricExporterResultCode
}
public protocol MetricProcessor {
  func finishCollectionCycle() -> [Coralogix.Metric]
  func process(metric: Coralogix.Metric)
}
public class MetricProcessorSdk : Coralogix.MetricProcessor {
  public init()
  public func finishCollectionCycle() -> [Coralogix.Metric]
  public func process(metric: Coralogix.Metric)
  @objc deinit
}
@available(*, deprecated, message: "Use MetricProcessorSdk instead")
public class UngroupedBatcher : Coralogix.MetricProcessor {
  public init()
  public func finishCollectionCycle() -> [Coralogix.Metric]
  public func process(metric: Coralogix.Metric)
  @objc deinit
}
public class MeterProviderBuilder {
  public var resource: Coralogix.Resource {
    get
  }
  public var metricExporter: any Coralogix.MetricExporter {
    get
  }
  public var metricPushInterval: Foundation.TimeInterval {
    get
  }
  public var metricProcessor: any Coralogix.MetricProcessor {
    get
  }
  public init()
  public func with(processor: any Coralogix.MetricProcessor) -> Self
  public func with(exporter: any Coralogix.MetricExporter) -> Self
  public func with(pushInterval: Foundation.TimeInterval) -> Self
  public func with(resource: Coralogix.Resource) -> Self
  public func build() -> any Coralogix.MeterProvider
  @objc deinit
}
public class MeterProviderSdk : Coralogix.MeterProvider {
  public static let defaultPushInterval: Swift.Double
  convenience public init()
  public init(metricProcessor: any Coralogix.MetricProcessor, metricExporter: any Coralogix.MetricExporter, metricPushInterval: Foundation.TimeInterval = MeterProviderSdk.defaultPushInterval, resource: Coralogix.Resource = EnvVarResource.get())
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any Coralogix.Meter
  public func setMetricProcessor(_ metricProcessor: any Coralogix.MetricProcessor)
  public func addMetricExporter(_ metricExporter: any Coralogix.MetricExporter)
  public func setMetricPushInterval(_ interval: Foundation.TimeInterval)
  public func setResource(_ resource: Coralogix.Resource)
  @objc deinit
}
extension Coralogix.Meter {
  public func addMetric(name _: Swift.String, type _: Coralogix.AggregationType, data _: [any Coralogix.MetricData])
}
public enum Aggregations {
  public static func drop() -> any Coralogix.Aggregation
  public static func defaultAggregation() -> any Coralogix.Aggregation
  public static func sum() -> any Coralogix.Aggregation
  public static func lastValue() -> any Coralogix.Aggregation
  public static func explicitBucketHistogram() -> any Coralogix.Aggregation
  public static func explicitBucketHistogram(buckets: [Swift.Double]) -> any Coralogix.Aggregation
}
public typealias AggregationResolver = (Coralogix.InstrumentType) -> any Coralogix.Aggregation
public protocol DefaultAggregationSelector {
  func getDefaultAggregation(for instrument: Coralogix.InstrumentType) -> any Coralogix.Aggregation
}
@_hasMissingDesignatedInitializers public class AggregationSelector : Coralogix.DefaultAggregationSelector {
  public static let instance: Coralogix.AggregationSelector
  final public let selector: Coralogix.AggregationResolver
  public func getDefaultAggregation(for instrument: Coralogix.InstrumentType) -> any Coralogix.Aggregation
  public static func defaultSelector() -> Coralogix.AggregationResolver
  public func with(instrumentType: Coralogix.InstrumentType, aggregation: any Coralogix.Aggregation) -> Coralogix.AggregationResolver
  @objc deinit
}
public protocol AggregationTemporalitySelectorProtocol {
  func getAggregationTemporality(for instrument: Coralogix.InstrumentType) -> Coralogix.AggregationTemporality
}
public class AggregationTemporalitySelector : Coralogix.AggregationTemporalitySelectorProtocol {
  public func getAggregationTemporality(for instrument: Coralogix.InstrumentType) -> Coralogix.AggregationTemporality
  public init(aggregationTemporalitySelector: @escaping (Coralogix.InstrumentType) -> Coralogix.AggregationTemporality)
  public var aggregationTemporalitySelector: (Coralogix.InstrumentType) -> Coralogix.AggregationTemporality
  @objc deinit
}
public enum AggregationTemporality {
  case delta
  case cumulative
  public static func alwaysCumulative() -> Coralogix.AggregationTemporalitySelector
  public static func alwaysDelta() -> Coralogix.AggregationTemporalitySelector
  public static func deltaPreferred() -> Coralogix.AggregationTemporalitySelector
  public static func == (a: Coralogix.AggregationTemporality, b: Coralogix.AggregationTemporality) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Aggregation : AnyObject {
  func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class AggregatorHandle {
  public func aggregateThenMaybeReset(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, attributes: [Swift.String : Coralogix.AttributeValue], reset: Swift.Bool) -> Coralogix.PointData
  public func recordLong(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  public func recordLong(value: Swift.Int)
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  public func recordDouble(value: Swift.Double)
  @objc deinit
}
public class Base2ExponentialHistogramAggregation : Coralogix.Aggregation {
  public static var instance: Coralogix.Base2ExponentialHistogramAggregation {
    get
  }
  public init(maxBuckets: Swift.Int, maxScale: Swift.Int)
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultAggregation : Coralogix.Aggregation {
  public static var instance: Coralogix.DefaultAggregation {
    get
  }
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleBase2ExponentialHistogramAggregator : Coralogix.StableAggregator {
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
public enum HistogramAggregatorError : Swift.Error {
  case unsupportedOperation(Swift.String)
}
public class DoubleExplicitBucketHistogramAggregator : Coralogix.StableAggregator {
  public init(boundaries: [Swift.Double], reservoirSupplier: @escaping () -> Coralogix.ExemplarReservoir)
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleLastValueAggregator : Coralogix.StableAggregator {
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleSumAggregator : Coralogix.SumAggregator, Coralogix.StableAggregator {
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DropAggregation : Coralogix.Aggregation {
  public static var instance: Coralogix.DropAggregation {
    get
  }
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DropAggregator : Coralogix.StableAggregator {
  public static var POINT_DATA: Coralogix.PointData {
    get
  }
  public func createHandle() -> Coralogix.AggregatorHandle
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) -> Coralogix.PointData
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExplicitBucketHistogramAggregation : Coralogix.Aggregation {
  public static var DEFAULT_BOUNDARIES: [Swift.Double] {
    get
  }
  public static var instance: Coralogix.ExplicitBucketHistogramAggregation {
    get
  }
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LastValueAggregation : Coralogix.Aggregation {
  public static var instance: Coralogix.LastValueAggregation {
    get
  }
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongLastValueAggregator : Coralogix.StableAggregator {
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongSumAggregator : Coralogix.SumAggregator, Coralogix.StableAggregator {
  public func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  public func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  public func createHandle() -> Coralogix.AggregatorHandle
  public func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
  @objc deinit
}
public protocol StableAggregator {
  func diff(previousCumulative: Coralogix.PointData, currentCumulative: Coralogix.PointData) throws -> Coralogix.PointData
  func toPoint(measurement: Coralogix.Measurement) throws -> Coralogix.PointData
  func createHandle() -> Coralogix.AggregatorHandle
  func toMetricData(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, descriptor: Coralogix.MetricDescriptor, points: [Coralogix.PointData], temporality: Coralogix.AggregationTemporality) -> Coralogix.StableMetricData
}
@_hasMissingDesignatedInitializers public class SumAggregation : Coralogix.Aggregation {
  public static var instance: Coralogix.SumAggregation {
    get
  }
  public func isCompatible(with descriptor: Coralogix.InstrumentDescriptor) -> Swift.Bool
  public func createAggregator(descriptor: Coralogix.InstrumentDescriptor, exemplarFilter: any Coralogix.ExemplarFilter) -> any Coralogix.StableAggregator
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SumAggregator {
  final public let isMonotonic: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CallbackRegistration {
  public func execute(reader: Coralogix.RegisteredReader, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExemplarData : Swift.Equatable {
  public var filteredAttributes: [Swift.String : Coralogix.AttributeValue]
  public var epochNanos: Swift.UInt64
  public var spanContext: Coralogix.SpanContext?
  public static func == (lhs: Coralogix.ExemplarData, rhs: Coralogix.ExemplarData) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DoubleExemplarData : Coralogix.ExemplarData {
  final public var value: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LongExemplarData : Coralogix.ExemplarData {
  final public var value: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Base2ExponentialHistogramIndexer {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleBase2ExponentialHistogramBuckets : Coralogix.ExponentialHistogramBuckets, Foundation.NSCopying {
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  public var totalCount: Swift.Int
  public var scale: Swift.Int
  public var offset: Swift.Int {
    get
  }
  public var bucketCounts: [Swift.Int64] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoublePointData : Coralogix.PointData {
  public var value: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EmptyExponentialHistogramBuckets : Coralogix.ExponentialHistogramBuckets {
  public var scale: Swift.Int
  public var offset: Swift.Int
  public var bucketCounts: [Swift.Int64]
  public var totalCount: Swift.Int
  @objc deinit
}
public protocol ExponentialHistogramBuckets {
  var scale: Swift.Int { get }
  var offset: Swift.Int { get }
  var bucketCounts: [Swift.Int64] { get }
  var totalCount: Swift.Int { get }
}
@_hasMissingDesignatedInitializers public class ExponentialHistogramPointData : Coralogix.PointData {
  public var scale: Swift.Int
  public var sum: Swift.Double
  public var count: Swift.Int
  public var zeroCount: Swift.Int64
  public var hasMin: Swift.Bool
  public var hasMax: Swift.Bool
  public var min: Swift.Double
  public var max: Swift.Double
  public var positiveBuckets: any Coralogix.ExponentialHistogramBuckets
  public var negativeBuckets: any Coralogix.ExponentialHistogramBuckets
  public init(scale: Swift.Int, sum: Swift.Double, zeroCount: Swift.Int64, hasMin: Swift.Bool, hasMax: Swift.Bool, min: Swift.Double, max: Swift.Double, positiveBuckets: any Coralogix.ExponentialHistogramBuckets, negativeBuckets: any Coralogix.ExponentialHistogramBuckets, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64, attributes: [Swift.String : Coralogix.AttributeValue], exemplars: [Coralogix.ExemplarData])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HistogramPointData : Coralogix.PointData {
  public var sum: Swift.Double
  public var count: Swift.UInt64
  public var min: Swift.Double
  public var max: Swift.Double
  public var boundaries: [Swift.Double]
  public var counts: [Swift.Int]
  public var hasMin: Swift.Bool
  public var hasMax: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongPointData : Coralogix.PointData {
  public var value: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SummaryPointData : Coralogix.PointData {
  public var count: Swift.UInt64
  public var sum: Swift.Double
  public var values: [any Coralogix.ValueAtQuantile]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PointData : Swift.Equatable {
  public var startEpochNanos: Swift.UInt64
  public var endEpochNanos: Swift.UInt64
  public var attributes: [Swift.String : Coralogix.AttributeValue]
  public var exemplars: [Coralogix.ExemplarData]
  public static func - (left: Coralogix.PointData, right: Coralogix.PointData) -> Self
  public static func == (lhs: Coralogix.PointData, rhs: Coralogix.PointData) -> Swift.Bool
  @objc deinit
}
public enum MetricDataType {
  case LongGauge
  case DoubleGauge
  case LongSum
  case DoubleSum
  case Summary
  case Histogram
  case ExponentialHistogram
  public static func == (a: Coralogix.MetricDataType, b: Coralogix.MetricDataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StableMetricData : Swift.Equatable {
  public var resource: Coralogix.Resource {
    get
  }
  public var instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var unit: Swift.String {
    get
  }
  public var type: Coralogix.MetricDataType {
    get
  }
  public var isMonotonic: Swift.Bool {
    get
  }
  public var data: Coralogix.StableMetricData.Data {
    get
  }
  public static let empty: Coralogix.StableMetricData
  @_hasMissingDesignatedInitializers public class Data : Swift.Equatable {
    public var points: [Coralogix.PointData] {
      get
    }
    public var aggregationTemporality: Coralogix.AggregationTemporality {
      get
    }
    public static func == (lhs: Coralogix.StableMetricData.Data, rhs: Coralogix.StableMetricData.Data) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: Coralogix.StableMetricData, rhs: Coralogix.StableMetricData) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class StableHistogramData : Coralogix.StableMetricData.Data {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StableExponentialHistogramData : Coralogix.StableMetricData.Data {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StableGaugeData : Coralogix.StableMetricData.Data {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StableSumData : Coralogix.StableMetricData.Data {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StableSummaryData : Coralogix.StableMetricData.Data {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleCounterMeterBuilderSdk : Coralogix.DoubleCounterBuilder {
  public func build() -> any Coralogix.DoubleCounter
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleGaugeBuilderSdk : Coralogix.DoubleGaugeBuilder {
  public func ofLongs() -> any Coralogix.LongGaugeBuilder
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleGauge
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleHistogramMeterBuilderSdk : Coralogix.DoubleHistogramBuilder {
  public func ofLongs() -> any Coralogix.LongHistogramBuilder
  public func build() -> any Coralogix.DoubleHistogram
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleHistogramMeterSdk : Coralogix.DoubleHistogram, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor
  public var storage: any Coralogix.WritableMetricStorage
  public func record(value: Swift.Double)
  public func record(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleUpDownCounterBuilderSdk : Coralogix.DoubleUpDownCounterBuilder {
  public func build() -> any Coralogix.DoubleUpDownCounter
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableDoubleMeasurement) -> Swift.Void) -> any Coralogix.ObservableDoubleUpDownCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleUpDownCounterSdk : Coralogix.DoubleUpDownCounter, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor {
    get
  }
  public func add(value: Swift.Double)
  public func add(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
public protocol ExemplarFilter {
  func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
  func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
}
public struct AlwaysOnFilter : Coralogix.ExemplarFilter {
  public func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
  public func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
}
public struct AlwaysOffFilter : Coralogix.ExemplarFilter {
  public init()
  public func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
  public func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class ExemplarReservoir {
  public func collectAndReset(attribute: [Swift.String : Coralogix.AttributeValue]) -> [Coralogix.ExemplarData]
  public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoopExemplarReservoir : Coralogix.ExemplarReservoir {
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : Coralogix.AttributeValue]) -> [Coralogix.ExemplarData]
  @objc deinit
}
public enum ExemplarReservoirCollection {
}
@_hasMissingDesignatedInitializers public class FixedSizedExemplarReservoir : Coralogix.ExemplarReservoir {
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : Coralogix.AttributeValue]) -> [Coralogix.ExemplarData]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RandomFixedSizedExemplarReservoir : Coralogix.FixedSizedExemplarReservoir {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FilteredExemplarReservoir : Coralogix.ExemplarReservoir {
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : Coralogix.AttributeValue]) -> [Coralogix.ExemplarData]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HistogramExemplarReservoir : Coralogix.FixedSizedExemplarReservoir {
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongToDoubleExemplarReservoir : Coralogix.ExemplarReservoir {
  public init(reservoir: Coralogix.ExemplarReservoir)
  override public func collectAndReset(attribute: [Swift.String : Coralogix.AttributeValue]) -> [Coralogix.ExemplarData]
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ReservoirCell {
  @objc deinit
}
public protocol ReservoirCellSelector {
  func reservoirCellIndex(for cells: [Coralogix.ReservoirCell], value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Int
  func reservoirCellIndex(for cells: [Coralogix.ReservoirCell], value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue]) -> Swift.Int
  func reset()
}
public protocol CollectionRegistration {
}
public protocol MetricProducer : Coralogix.CollectionRegistration {
  func collectAllMetrics() -> [Coralogix.StableMetricData]
}
public struct NoopMetricProducer : Coralogix.MetricProducer {
  public func collectAllMetrics() -> [Coralogix.StableMetricData]
}
public protocol StableMetricExporter : Coralogix.AggregationTemporalitySelectorProtocol, Coralogix.DefaultAggregationSelector {
  func export(metrics: [Coralogix.StableMetricData]) -> Coralogix.ExportResult
  func flush() -> Coralogix.ExportResult
  func shutdown() -> Coralogix.ExportResult
}
extension Coralogix.StableMetricExporter {
  public func getDefaultAggregation(for instrument: Coralogix.InstrumentType) -> any Coralogix.Aggregation
}
public class StablePeriodicMetricReaderBuilder {
  public var exporter: any Coralogix.StableMetricExporter {
    get
  }
  public var exporterInterval: Swift.Double {
    get
  }
  public init(exporter: any Coralogix.StableMetricExporter)
  public func setInterval(timeInterval: Foundation.TimeInterval) -> Self
  public func build() -> Coralogix.StablePeriodicMetricReaderSdk
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StablePeriodicMetricReaderSdk : Coralogix.StableMetricReader {
  @objc deinit
  public func register(registration: any Coralogix.CollectionRegistration)
  public func forceFlush() -> Coralogix.ExportResult
  public func shutdown() -> Coralogix.ExportResult
  public func getAggregationTemporality(for instrument: Coralogix.InstrumentType) -> Coralogix.AggregationTemporality
  public func getDefaultAggregation(for instrument: Coralogix.InstrumentType) -> any Coralogix.Aggregation
}
public protocol Instrument : Swift.Equatable {
  var instrumentDescriptor: Coralogix.InstrumentDescriptor { get }
}
extension Coralogix.Instrument {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public struct InstrumentDescriptor : Swift.Equatable {
  public let name: Swift.String
  public let description: Swift.String
  public let unit: Swift.String
  public let type: Coralogix.InstrumentType
  public let valueType: Coralogix.InstrumentValueType
  public init(name: Swift.String, description: Swift.String, unit: Swift.String, type: Coralogix.InstrumentType, valueType: Coralogix.InstrumentValueType)
  public static func == (lhs: Coralogix.InstrumentDescriptor, rhs: Coralogix.InstrumentDescriptor) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class InstrumentSelector {
  public static func builder() -> Coralogix.InstrumentSelectorBuilder
  @objc deinit
}
public class InstrumentSelectorBuilder {
  public init()
  public func setInstrument(type: Coralogix.InstrumentType) -> Self
  public func setInstrument(name: Swift.String) -> Self
  public func setMeter(name: Swift.String) -> Self
  public func setMeter(version: Swift.String) -> Self
  public func setMeter(schemaUrl: Swift.String) -> Self
  public func build() -> Coralogix.InstrumentSelector
  @objc deinit
}
public enum InstrumentType : Swift.CaseIterable {
  case counter
  case upDownCounter
  case histogram
  case observableCounter
  case observableUpDownCounter
  case observableGauge
  public static func == (a: Coralogix.InstrumentType, b: Coralogix.InstrumentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Coralogix.InstrumentType]
  nonisolated public static var allCases: [Coralogix.InstrumentType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum InstrumentValueType {
  case long
  case double
  public static func == (a: Coralogix.InstrumentValueType, b: Coralogix.InstrumentValueType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LongCounterMeterBuilderSdk : Coralogix.LongCounterBuilder {
  public func ofDoubles() -> any Coralogix.DoubleCounterBuilder
  public func build() -> any Coralogix.LongCounter
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongCounterSdk : Coralogix.LongCounter, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor
  public func add(value: Swift.Int)
  public func add(value: Swift.Int, attribute: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
public struct DoubleCounterSdk : Coralogix.DoubleCounter, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor
  public mutating func add(value: Swift.Double)
  public mutating func add(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
@_hasMissingDesignatedInitializers public class LongGaugeBuilderSdk : Coralogix.LongGaugeBuilder {
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongGauge
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongHistogramMeterBuilderSdk : Coralogix.LongHistogramBuilder {
  public func build() -> any Coralogix.LongHistogram
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongHistogramMeterSdk : Coralogix.LongHistogram, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor
  public func record(value: Swift.Int)
  public func record(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongUpDownCounterBuilderSdk : Coralogix.LongUpDownCounterBuilder {
  public func ofDoubles() -> any Coralogix.DoubleUpDownCounterBuilder
  public func build() -> any Coralogix.LongUpDownCounter
  public func buildWithCallback(_ callback: @escaping (any Coralogix.ObservableLongMeasurement) -> Swift.Void) -> any Coralogix.ObservableLongUpDownCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongUpDownCounterSdk : Coralogix.LongUpDownCounter, Coralogix.Instrument {
  public var instrumentDescriptor: Coralogix.InstrumentDescriptor {
    get
  }
  public func add(value: Swift.Int)
  public func add(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
public struct Measurement {
  public var startEpochNano: Swift.UInt64 {
    get
  }
  public var epochNano: Swift.UInt64 {
    get
  }
  public var hasLongValue: Swift.Bool {
    get
  }
  public var longValue: Swift.Int {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var hasDoubleValue: Swift.Bool {
    get
  }
  public var attributes: [Swift.String : Coralogix.AttributeValue] {
    get
  }
  public static func longMeasurement(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue]) -> Coralogix.Measurement
  public static func doubleMeasurement(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue]) -> Coralogix.Measurement
}
@_hasMissingDesignatedInitializers public class MeterBuilderSdk : Coralogix.MeterBuilder {
  public func setSchemaUrl(schemaUrl: Swift.String) -> Self
  public func setInstrumentationVersion(instrumentationVersion: Swift.String) -> Self
  public func build() -> any Coralogix.StableMeter
  @objc deinit
}
public struct MetricDescriptor : Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var view: Coralogix.StableView {
    get
  }
  public var instrument: Coralogix.InstrumentDescriptor {
    get
  }
  public func aggregationName() -> Swift.String
  public static func == (lhs: Coralogix.MetricDescriptor, rhs: Coralogix.MetricDescriptor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ObservableInstrumentSdk : Coralogix.ObservableDoubleCounter, Coralogix.ObservableLongCounter, Coralogix.ObservableLongGauge, Coralogix.ObservableLongUpDownCounter, Coralogix.ObservableDoubleGauge, Coralogix.ObservableDoubleUpDownCounter {
  public func close()
}
@_hasMissingDesignatedInitializers public class RegisteredReader : Swift.Equatable, Swift.Hashable {
  final public let id: Swift.Int32
  final public let reader: any Coralogix.StableMetricReader
  final public let registry: Coralogix.StableViewRegistry
  public var lastCollectedEpochNanos: Swift.UInt64
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Coralogix.RegisteredReader, rhs: Coralogix.RegisteredReader) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class StableMeterProviderBuilder {
  public var clock: any Coralogix.Clock {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var metricReaders: [any Coralogix.StableMetricReader] {
    get
  }
  public var registeredViews: [Coralogix.RegisteredView] {
    get
  }
  public var exemplarFilter: any Coralogix.ExemplarFilter {
    get
  }
  public init()
  public func setClock(clock: any Coralogix.Clock) -> Self
  public func setResource(resource: Coralogix.Resource) -> Self
  public func registerView(selector: Coralogix.InstrumentSelector, view: Coralogix.StableView) -> Self
  public func registerMetricReader(reader: any Coralogix.StableMetricReader) -> Self
  public func build() -> Coralogix.StableMeterProviderSdk
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeterProviderError : Swift.Error {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableMeterProviderSdk : Coralogix.StableMeterProvider {
  public func get(name: Swift.String) -> any Coralogix.StableMeter
  public func meterBuilder(name: Swift.String) -> any Coralogix.MeterBuilder
  public static func builder() -> Coralogix.StableMeterProviderBuilder
  public func shutdown() -> Coralogix.ExportResult
  public func forceFlush() -> Coralogix.ExportResult
  @objc deinit
}
public protocol StableMetricReader : Coralogix.AggregationTemporalitySelectorProtocol, Coralogix.DefaultAggregationSelector {
  func forceFlush() -> Coralogix.ExportResult
  func shutdown() -> Coralogix.ExportResult
  func register(registration: any Coralogix.CollectionRegistration)
}
@_hasMissingDesignatedInitializers public class AsynchronousMetricStorage : Coralogix.MetricStorage {
  public var registeredReader: Coralogix.RegisteredReader {
    get
  }
  public var metricDescriptor: Coralogix.MetricDescriptor {
    get
  }
  public func collect(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> Coralogix.StableMetricData
  public func isEmpty() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EmptyMetricStorage {
  public func recordLong(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  public static var instance: Coralogix.EmptyMetricStorage
  public var metricDescriptor: Coralogix.MetricDescriptor
  public func collect(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> Coralogix.StableMetricData
  public func isEmpty() -> Swift.Bool
  @objc deinit
}
public struct MetricStorageConstants {
}
public protocol MetricStorage {
  var metricDescriptor: Coralogix.MetricDescriptor { get }
  mutating func collect(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> Coralogix.StableMetricData
  func isEmpty() -> Swift.Bool
}
public protocol WritableMetricStorage {
  mutating func recordLong(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  mutating func recordDouble(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
}
@_hasMissingDesignatedInitializers public class MetricStorageRegistry {
  @objc deinit
}
public class MeterProviderSharedState {
  public init(clock: any Coralogix.Clock, resource: Coralogix.Resource, startEpochNanos: Swift.UInt64, exemplarFilter: any Coralogix.ExemplarFilter)
  public var clock: any Coralogix.Clock {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var startEpochNanos: Swift.UInt64 {
    get
  }
  public var exemplarFilter: any Coralogix.ExemplarFilter {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableObservableMeasurementSdk : Coralogix.ObservableLongMeasurement, Coralogix.ObservableDoubleMeasurement {
  public var descriptor: Coralogix.InstrumentDescriptor {
    get
  }
  public var storages: [Coralogix.AsynchronousMetricStorage] {
    get
  }
  public func clearActiveReader()
  public func record(value: Swift.Int)
  public func record(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  public func record(value: Swift.Double)
  public func record(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SynchronousMetricStorage {
  public var metricDescriptor: Coralogix.MetricDescriptor {
    get
  }
  public func collect(resource: Coralogix.Resource, scope: Coralogix.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> Coralogix.StableMetricData
  public func isEmpty() -> Swift.Bool
  public func recordLong(value: Swift.Int, attributes: [Swift.String : Coralogix.AttributeValue])
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : Coralogix.AttributeValue])
  @objc deinit
}
public protocol ValueAtQuantile {
  func quantile() -> Swift.Double
  func value() -> Swift.Double
}
public protocol AttributeProcessor {
  func process(incoming: [Swift.String : Coralogix.AttributeValue]) -> [Swift.String : Coralogix.AttributeValue]
}
extension Coralogix.AttributeProcessor {
  public func then(other: any Coralogix.AttributeProcessor) -> any Coralogix.AttributeProcessor
}
@_hasMissingDesignatedInitializers public class SimpleAttributeProcessor : Coralogix.AttributeProcessor {
  public func process(incoming: [Swift.String : Coralogix.AttributeValue]) -> [Swift.String : Coralogix.AttributeValue]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JoinedAttributeProcessor : Coralogix.AttributeProcessor {
  public func process(incoming: [Swift.String : Coralogix.AttributeValue]) -> [Swift.String : Coralogix.AttributeValue]
  public func append(processor: any Coralogix.AttributeProcessor) -> Coralogix.JoinedAttributeProcessor
  public func prepend(processor: any Coralogix.AttributeProcessor) -> Coralogix.JoinedAttributeProcessor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoopAttributeProcessor : Coralogix.AttributeProcessor {
  public func process(incoming: [Swift.String : Coralogix.AttributeValue]) -> [Swift.String : Coralogix.AttributeValue]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RegisteredView {
  public var selector: Coralogix.InstrumentSelector {
    get
  }
  public var view: Coralogix.StableView {
    get
  }
  public var attributeProcessor: any Coralogix.AttributeProcessor {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableView {
  public var name: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var aggregation: any Coralogix.Aggregation {
    get
  }
  public var attributeProcessor: any Coralogix.AttributeProcessor {
    get
  }
  public static func builder() -> Coralogix.ViewBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableViewRegistry {
  public func findViews(descriptor: Coralogix.InstrumentDescriptor, meterScope: Coralogix.InstrumentationScopeInfo) -> [Coralogix.RegisteredView]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViewBuilder {
  public func withName(name: Swift.String) -> Self
  public func withDescription(description: Swift.String) -> Self
  public func withAggregation(aggregation: any Coralogix.Aggregation) -> Self
  public func withAttributeProcessor(processor: any Coralogix.AttributeProcessor) -> Self
  public func addAttributeFilter(keyFilter: @escaping (Swift.String) -> Swift.Bool) -> Self
  public func addAttributeProcessor(processor: any Coralogix.AttributeProcessor) -> Self
  public func build() -> Coralogix.StableView
  @objc deinit
}
public struct EnvVarResource {
  public static let resource: Coralogix.Resource
  public static func get(environment: [Swift.String : Swift.String] = ProcessInfo.processInfo.environment) -> Coralogix.Resource
}
public struct Resource : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public var attributes: [Swift.String : Coralogix.AttributeValue]
  public init()
  public init(attributes: [Swift.String : Coralogix.AttributeValue])
  public mutating func merge(other: Coralogix.Resource)
  public func merging(other: Coralogix.Resource) -> Coralogix.Resource
  public static func == (a: Coralogix.Resource, b: Coralogix.Resource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ResourceAttributes : Swift.String {
  case browserBrands
  case browserPlatform
  case browserMobile
  case browserLanguage
  case userAgentOriginal
  case cloudProvider
  case cloudAccountId
  case cloudRegion
  case cloudResourceId
  case cloudAvailabilityZone
  case cloudPlatform
  case awsEcsContainerArn
  case awsEcsClusterArn
  case awsEcsLaunchtype
  case awsEcsTaskArn
  case awsEcsTaskFamily
  case awsEcsTaskRevision
  case awsEksClusterArn
  case awsLogGroupNames
  case awsLogGroupArns
  case awsLogStreamNames
  case awsLogStreamArns
  case gcpCloudRunJobExecution
  case gcpCloudRunJobTaskIndex
  case gcpGceInstanceName
  case gcpGceInstanceHostname
  case herokuReleaseCreationTimestamp
  case herokuReleaseCommit
  case herokuAppId
  case containerName
  case containerId
  case containerRuntime
  case containerImageName
  case containerImageTag
  case containerImageId
  case containerCommand
  case containerCommandLine
  case containerCommandArgs
  case deploymentEnvironment
  case deviceId
  case deviceModelIdentifier
  case deviceModelName
  case deviceManufacturer
  case faasName
  case faasVersion
  case faasInstance
  case faasMaxMemory
  case hostId
  case hostName
  case hostType
  case hostArch
  case hostImageName
  case hostImageId
  case hostImageVersion
  case k8sClusterName
  case k8sClusterUid
  case k8sNodeName
  case k8sNodeUid
  case k8sNamespaceName
  case k8sPodUid
  case k8sPodName
  case k8sContainerName
  case k8sContainerRestartCount
  case k8sReplicasetUid
  case k8sReplicasetName
  case k8sDeploymentUid
  case k8sDeploymentName
  case k8sStatefulsetUid
  case k8sStatefulsetName
  case k8sDaemonsetUid
  case k8sDaemonsetName
  case k8sJobUid
  case k8sJobName
  case k8sCronjobUid
  case k8sCronjobName
  case osType
  case osDescription
  case osName
  case osVersion
  case processPid
  case processParentPid
  case processExecutableName
  case processExecutablePath
  case processCommand
  case processCommandLine
  case processCommandArgs
  case processOwner
  case processRuntimeName
  case processRuntimeVersion
  case processRuntimeDescription
  case serviceName
  case serviceVersion
  case serviceNamespace
  case serviceInstanceId
  case telemetrySdkName
  case telemetrySdkLanguage
  case telemetrySdkVersion
  case telemetryAutoVersion
  case webengineName
  case webengineVersion
  case webengineDescription
  case otelScopeName
  case otelScopeVersion
  case otelLibraryName
  case otelLibraryVersion
  public struct CloudProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: Coralogix.ResourceAttributes.CloudProviderValues
    public static let aws: Coralogix.ResourceAttributes.CloudProviderValues
    public static let azure: Coralogix.ResourceAttributes.CloudProviderValues
    public static let gcp: Coralogix.ResourceAttributes.CloudProviderValues
    public static let heroku: Coralogix.ResourceAttributes.CloudProviderValues
    public static let ibmCloud: Coralogix.ResourceAttributes.CloudProviderValues
    public static let tencentCloud: Coralogix.ResourceAttributes.CloudProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct CloudPlatformValues : Swift.CustomStringConvertible {
    public static let alibabaCloudEcs: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudFc: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudOpenshift: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsEc2: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsEcs: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsEks: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsLambda: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsElasticBeanstalk: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsAppRunner: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let awsOpenshift: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureVm: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureContainerInstances: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureAks: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureFunctions: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureAppService: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let azureOpenshift: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpBareMetalSolution: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpComputeEngine: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudRun: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpKubernetesEngine: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudFunctions: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpAppEngine: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let gcpOpenshift: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let ibmCloudOpenshift: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudCvm: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudEks: Coralogix.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudScf: Coralogix.ResourceAttributes.CloudPlatformValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum AwsEcsLaunchtypeValues : Swift.String {
    case ec2
    case fargate
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct HostArchValues : Swift.CustomStringConvertible {
    public static let amd64: Coralogix.ResourceAttributes.HostArchValues
    public static let arm32: Coralogix.ResourceAttributes.HostArchValues
    public static let arm64: Coralogix.ResourceAttributes.HostArchValues
    public static let ia64: Coralogix.ResourceAttributes.HostArchValues
    public static let ppc32: Coralogix.ResourceAttributes.HostArchValues
    public static let ppc64: Coralogix.ResourceAttributes.HostArchValues
    public static let s390x: Coralogix.ResourceAttributes.HostArchValues
    public static let x86: Coralogix.ResourceAttributes.HostArchValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct OsTypeValues : Swift.CustomStringConvertible {
    public static let windows: Coralogix.ResourceAttributes.OsTypeValues
    public static let linux: Coralogix.ResourceAttributes.OsTypeValues
    public static let darwin: Coralogix.ResourceAttributes.OsTypeValues
    public static let freebsd: Coralogix.ResourceAttributes.OsTypeValues
    public static let netbsd: Coralogix.ResourceAttributes.OsTypeValues
    public static let openbsd: Coralogix.ResourceAttributes.OsTypeValues
    public static let dragonflybsd: Coralogix.ResourceAttributes.OsTypeValues
    public static let hpux: Coralogix.ResourceAttributes.OsTypeValues
    public static let aix: Coralogix.ResourceAttributes.OsTypeValues
    public static let solaris: Coralogix.ResourceAttributes.OsTypeValues
    public static let zOs: Coralogix.ResourceAttributes.OsTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct TelemetrySdkLanguageValues : Swift.CustomStringConvertible {
    public static let cpp: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let dotnet: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let erlang: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let go: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let java: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let nodejs: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let php: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let python: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let ruby: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let rust: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let swift: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public static let webjs: Coralogix.ResourceAttributes.TelemetrySdkLanguageValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func == (left: Coralogix.ResourceAttributes, right: Swift.String) -> Swift.Bool
public func == (left: Swift.String, right: Coralogix.ResourceAttributes) -> Swift.Bool
public struct ArrayWithCapacity<T> {
  public let capacity: Swift.Int
  public init(capacity: Swift.Int)
  public mutating func append(_ item: T)
}
extension Coralogix.ArrayWithCapacity : Swift.MutableCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = T
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<Coralogix.ArrayWithCapacity<T>>
  public typealias Iterator = Swift.IndexingIterator<Coralogix.ArrayWithCapacity<T>>
  public typealias SubSequence = Swift.Slice<Coralogix.ArrayWithCapacity<T>>
}
public struct AttributesDictionary {
  public init(capacity: Swift.Int, valueLengthLimit: Swift.Int = Int.max)
  public subscript(key: Swift.String) -> Coralogix.AttributeValue? {
    get
    set
  }
  @discardableResult
  public mutating func updateValue(value: Coralogix.AttributeValue, forKey key: Swift.String) -> Coralogix.AttributeValue?
  public mutating func updateValues(attributes: [Swift.String : Coralogix.AttributeValue])
  public mutating func updateValues(attributes: Coralogix.AttributesDictionary)
  public mutating func removeValueForKey(key: Swift.String) -> Coralogix.AttributeValue?
  public mutating func removeAll(keepCapacity: Swift.Int)
  public var count: Swift.Int {
    get
  }
  public var numberOfDroppedAttributes: Swift.Int {
    get
  }
  public var values: [Coralogix.AttributeValue] {
    get
  }
}
extension Coralogix.AttributesDictionary : Swift.Sequence {
  public func makeIterator() -> Coralogix.AttributesWithCapacityIterator
  public typealias Element = (Swift.String, Coralogix.AttributeValue)
  public typealias Iterator = Coralogix.AttributesWithCapacityIterator
}
public struct AttributesWithCapacityIterator : Swift.IteratorProtocol {
  public mutating func next() -> (Swift.String, Coralogix.AttributeValue)?
  public typealias Element = (Swift.String, Coralogix.AttributeValue)
}
public struct SpanData : Swift.Equatable, Swift.Codable {
  public var traceId: Coralogix.TraceId {
    get
  }
  public var spanId: Coralogix.SpanId {
    get
  }
  public var traceFlags: Coralogix.TraceFlags {
    get
  }
  public var traceState: Coralogix.TraceState {
    get
  }
  public var parentSpanId: Coralogix.SpanId? {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var instrumentationScope: Coralogix.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var kind: Coralogix.SpanKind {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var attributes: [Swift.String : Coralogix.AttributeValue] {
    get
  }
  public var events: [Coralogix.SpanData.Event] {
    get
  }
  public var links: [Coralogix.SpanData.Link] {
    get
  }
  public var status: Coralogix.Status {
    get
  }
  public var endTime: Foundation.Date {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public static func == (lhs: Coralogix.SpanData, rhs: Coralogix.SpanData) -> Swift.Bool
  @discardableResult
  public mutating func settingName(_ name: Swift.String) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTraceId(_ traceId: Coralogix.TraceId) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingSpanId(_ spanId: Coralogix.SpanId) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTraceFlags(_ traceFlags: Coralogix.TraceFlags) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTraceState(_ traceState: Coralogix.TraceState) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingAttributes(_ attributes: [Swift.String : Coralogix.AttributeValue]) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingStartTime(_ time: Foundation.Date) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingEndTime(_ time: Foundation.Date) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingKind(_ kind: Coralogix.SpanKind) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingLinks(_ links: [Coralogix.SpanData.Link]) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingParentSpanId(_ parentSpanId: Coralogix.SpanId) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingResource(_ resource: Coralogix.Resource) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingStatus(_ status: Coralogix.Status) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingEvents(_ events: [Coralogix.SpanData.Event]) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingHasRemoteParent(_ hasRemoteParent: Swift.Bool) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingHasEnded(_ hasEnded: Swift.Bool) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTotalRecordedEvents(_ totalRecordedEvents: Swift.Int) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTotalRecordedLinks(_ totalRecordedLinks: Swift.Int) -> Coralogix.SpanData
  @discardableResult
  public mutating func settingTotalAttributeCount(_ totalAttributeCount: Swift.Int) -> Coralogix.SpanData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Coralogix.SpanData {
  public struct Event : Swift.Equatable, Swift.Codable {
    public var timestamp: Foundation.Date {
      get
    }
    public var name: Swift.String {
      get
    }
    public var attributes: [Swift.String : Coralogix.AttributeValue] {
      get
    }
    public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : Coralogix.AttributeValue]? = nil)
    public init(timestamp: Foundation.Date, event: Coralogix.SpanData.Event)
    public static func == (a: Coralogix.SpanData.Event, b: Coralogix.SpanData.Event) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Coralogix.SpanData {
  public struct Link : Swift.Codable {
    public let context: Coralogix.SpanContext
    public let attributes: [Swift.String : Coralogix.AttributeValue]
    public init(context: Coralogix.SpanContext, attributes: [Swift.String : Coralogix.AttributeValue] = [String: AttributeValue]())
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public func == (lhs: Coralogix.SpanData.Link, rhs: Coralogix.SpanData.Link) -> Swift.Bool
public func == (lhs: [Coralogix.SpanData.Link], rhs: [Coralogix.SpanData.Link]) -> Swift.Bool
public class MultiSpanExporter : Coralogix.SpanExporter {
  public init(spanExporters: [any Coralogix.SpanExporter])
  public func export(spans: [Coralogix.SpanData], explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.SpanExporterResultCode
  public func flush(explicitTimeout: Foundation.TimeInterval? = nil) -> Coralogix.SpanExporterResultCode
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  @objc deinit
}
public protocol SpanExporter : AnyObject {
  @discardableResult
  func export(spans: [Coralogix.SpanData], explicitTimeout: Foundation.TimeInterval?) -> Coralogix.SpanExporterResultCode
  func flush(explicitTimeout: Foundation.TimeInterval?) -> Coralogix.SpanExporterResultCode
  func shutdown(explicitTimeout: Foundation.TimeInterval?)
}
extension Coralogix.SpanExporter {
  public func export(spans: [Coralogix.SpanData]) -> Coralogix.SpanExporterResultCode
  public func flush() -> Coralogix.SpanExporterResultCode
  public func shutdown()
}
public enum SpanExporterResultCode {
  case success
  case failure
  public static func == (a: Coralogix.SpanExporterResultCode, b: Coralogix.SpanExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IdGenerator {
  func generateSpanId() -> Coralogix.SpanId
  func generateTraceId() -> Coralogix.TraceId
}
public struct EnvironmentContextPropagator : Coralogix.TextMapPropagator {
  public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: Coralogix.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : Coralogix.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> Coralogix.SpanContext? where G : Coralogix.Getter
}
public struct RandomIdGenerator : Coralogix.IdGenerator {
  public init()
  public func generateSpanId() -> Coralogix.SpanId
  public func generateTraceId() -> Coralogix.TraceId
}
public protocol ReadableSpan : Coralogix.Span {
  var name: Swift.String { get set }
  var instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo { get }
  func toSpanData() -> Coralogix.SpanData
  var hasEnded: Swift.Bool { get }
  var latency: Foundation.TimeInterval { get }
}
@_hasMissingDesignatedInitializers public class RecordEventsReadableSpan : Coralogix.ReadableSpan {
  public var isRecording: Swift.Bool
  public var name: Swift.String {
    get
    set
  }
  public var spanLimits: Coralogix.SpanLimits {
    get
  }
  public var context: Coralogix.SpanContext {
    get
  }
  public var parentContext: Coralogix.SpanContext? {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var spanProcessor: any Coralogix.SpanProcessor {
    get
  }
  public var links: [Coralogix.SpanData.Link] {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var maxNumberOfAttributes: Swift.Int {
    get
  }
  public var maxNumberOfAttributesPerEvent: Swift.Int {
    get
  }
  public var kind: Coralogix.SpanKind {
    get
  }
  public var clock: any Coralogix.Clock {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var events: Coralogix.ArrayWithCapacity<Coralogix.SpanData.Event> {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var status: Coralogix.Status {
    get
    set
  }
  public var latency: Foundation.TimeInterval {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public static func startSpan(context: Coralogix.SpanContext, name: Swift.String, instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo, kind: Coralogix.SpanKind, parentContext: Coralogix.SpanContext?, hasRemoteParent: Swift.Bool, spanLimits: Coralogix.SpanLimits, spanProcessor: any Coralogix.SpanProcessor, clock: any Coralogix.Clock, resource: Coralogix.Resource, attributes: Coralogix.AttributesDictionary, links: [Coralogix.SpanData.Link], totalRecordedLinks: Swift.Int, startTime: Foundation.Date?) -> Coralogix.RecordEventsReadableSpan
  public func toSpanData() -> Coralogix.SpanData
  public func setAttribute(key: Swift.String, value: Coralogix.AttributeValue?)
  public func addEvent(name: Swift.String)
  public func addEvent(name: Swift.String, timestamp: Foundation.Date)
  public func addEvent(name: Swift.String, attributes: [Swift.String : Coralogix.AttributeValue])
  public func addEvent(name: Swift.String, attributes: [Swift.String : Coralogix.AttributeValue], timestamp: Foundation.Date)
  public func end()
  public func end(time: Foundation.Date)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol Sampler : AnyObject, Swift.CustomStringConvertible {
  func shouldSample(parentContext: Coralogix.SpanContext?, traceId: Coralogix.TraceId, name: Swift.String, kind: Coralogix.SpanKind, attributes: [Swift.String : Coralogix.AttributeValue], parentLinks: [Coralogix.SpanData.Link]) -> any Coralogix.Decision
}
public protocol Decision {
  var isSampled: Swift.Bool { get }
  var attributes: [Swift.String : Coralogix.AttributeValue] { get }
}
public enum Samplers {
  public static var alwaysOn: any Coralogix.Sampler
  public static var alwaysOff: any Coralogix.Sampler
  public static func traceIdRatio(ratio: Swift.Double) -> any Coralogix.Sampler
  public static func parentBased(root: any Coralogix.Sampler, remoteParentSampled: (any Coralogix.Sampler)? = nil, remoteParentNotSampled: (any Coralogix.Sampler)? = nil, localParentSampled: (any Coralogix.Sampler)? = nil, localParentNotSampled: (any Coralogix.Sampler)? = nil) -> any Coralogix.Sampler
}
public struct SpanLimits : Swift.Equatable {
  public var attributeCountLimit: Swift.Int {
    get
  }
  public var eventCountLimit: Swift.Int {
    get
  }
  public var linkCountLimit: Swift.Int {
    get
  }
  public var attributePerEventCountLimit: Swift.Int {
    get
  }
  public var attributePerLinkCountLimit: Swift.Int {
    get
  }
  public init()
  @discardableResult
  public func settingAttributeCountLimit(_ number: Swift.UInt) -> Coralogix.SpanLimits
  @discardableResult
  public func settingEventCountLimit(_ number: Swift.UInt) -> Coralogix.SpanLimits
  @discardableResult
  public func settingLinkCountLimit(_ number: Swift.UInt) -> Coralogix.SpanLimits
  @discardableResult
  public func settingAttributePerEventCountLimit(_ number: Swift.UInt) -> Coralogix.SpanLimits
  @discardableResult
  public func settingAttributePerLinkCountLimit(_ number: Swift.UInt) -> Coralogix.SpanLimits
  public static func == (lhs: Coralogix.SpanLimits, rhs: Coralogix.SpanLimits) -> Swift.Bool
}
public protocol SpanProcessor {
  var isStartRequired: Swift.Bool { get }
  var isEndRequired: Swift.Bool { get }
  func onStart(parentContext: Coralogix.SpanContext?, span: any Coralogix.ReadableSpan)
  mutating func onEnd(span: any Coralogix.ReadableSpan)
  mutating func shutdown(explicitTimeout: Foundation.TimeInterval?)
  func forceFlush(timeout: Foundation.TimeInterval?)
}
public struct BatchSpanProcessor : Coralogix.SpanProcessor {
  public init(spanExporter: any Coralogix.SpanExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [Coralogix.SpanData]) -> Swift.Void)? = nil)
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: Coralogix.SpanContext?, span: any Coralogix.ReadableSpan)
  public func onEnd(span: any Coralogix.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
public struct MultiSpanProcessor : Coralogix.SpanProcessor {
  public init(spanProcessors: [any Coralogix.SpanProcessor])
  public var isStartRequired: Swift.Bool {
    get
  }
  public var isEndRequired: Swift.Bool {
    get
  }
  public func onStart(parentContext: Coralogix.SpanContext?, span: any Coralogix.ReadableSpan)
  public func onEnd(span: any Coralogix.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
public struct SimpleSpanProcessor : Coralogix.SpanProcessor {
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: Coralogix.SpanContext?, span: any Coralogix.ReadableSpan)
  public mutating func onEnd(span: any Coralogix.ReadableSpan)
  public func shutdown(explicitTimeout: Foundation.TimeInterval? = nil)
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  public init(spanExporter: any Coralogix.SpanExporter)
  public func reportingOnlySampled(sampled: Swift.Bool) -> Coralogix.SimpleSpanProcessor
}
public class TracerProviderBuilder {
  public var clock: any Coralogix.Clock {
    get
  }
  public var idGenerator: any Coralogix.IdGenerator {
    get
  }
  public var resource: Coralogix.Resource {
    get
  }
  public var spanLimits: Coralogix.SpanLimits {
    get
  }
  public var sampler: any Coralogix.Sampler {
    get
  }
  public var spanProcessors: [any Coralogix.SpanProcessor] {
    get
  }
  public init()
  public func with(clock: any Coralogix.Clock) -> Self
  public func with(idGenerator: any Coralogix.IdGenerator) -> Self
  public func with(resource: Coralogix.Resource) -> Self
  public func with(spanLimits: Coralogix.SpanLimits) -> Self
  public func with(sampler: any Coralogix.Sampler) -> Self
  public func add(spanProcessor: any Coralogix.SpanProcessor) -> Self
  public func add(spanProcessors: [any Coralogix.SpanProcessor]) -> Self
  public func build() -> Coralogix.TracerProviderSdk
  @objc deinit
}
public class TracerProviderSdk : Coralogix.TracerProvider {
  public init(clock: any Coralogix.Clock = MillisClock(), idGenerator: any Coralogix.IdGenerator = RandomIdGenerator(), resource: Coralogix.Resource = EnvVarResource.get(), spanLimits: Coralogix.SpanLimits = SpanLimits(), sampler: any Coralogix.Sampler = Samplers.parentBased(root: Samplers.alwaysOn), spanProcessors: [any Coralogix.SpanProcessor] = [])
  @objc deinit
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any Coralogix.Tracer
  public func getActiveClock() -> any Coralogix.Clock
  public func updateActiveClock(_ newClock: any Coralogix.Clock)
  public func getActiveIdGenerator() -> any Coralogix.IdGenerator
  public func updateActiveIdGenerator(_ newGenerator: any Coralogix.IdGenerator)
  public func getActiveResource() -> Coralogix.Resource
  public func updateActiveResource(_ newResource: Coralogix.Resource)
  public func getActiveSpanLimits() -> Coralogix.SpanLimits
  public func updateActiveSpanLimits(_ spanLimits: Coralogix.SpanLimits)
  public func getActiveSampler() -> any Coralogix.Sampler
  public func updateActiveSampler(_ newSampler: any Coralogix.Sampler)
  public func getActiveSpanProcessors() -> [any Coralogix.SpanProcessor]
  public func addSpanProcessor(_ spanProcessor: any Coralogix.SpanProcessor)
  public func resetSpanProcessors()
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class TracerSdk : Coralogix.Tracer {
  final public let instrumentationScopeInfo: Coralogix.InstrumentationScopeInfo
  public func spanBuilder(spanName: Swift.String) -> any Coralogix.SpanBuilder
  @objc deinit
}
extension Coralogix.Resource {
  public static let OTEL_SWIFT_SDK_VERSION: Swift.String
}
public class URLSessionInstrumentation {
  public var tracer: any Coralogix.Tracer {
    get
  }
  public var startedRequestSpans: [any Coralogix.Span] {
    get
  }
  public init(configuration: Coralogix.URLSessionInstrumentationConfiguration)
  @objc deinit
}
public typealias DataOrFile = Any
public typealias SessionTaskId = Swift.String
public typealias HTTPStatus = Swift.Int
public struct URLSessionInstrumentationConfiguration {
  public init(shouldRecordPayload: ((Foundation.URLSession) -> (Swift.Bool)?)? = nil, shouldInstrument: ((Foundation.URLRequest) -> (Swift.Bool)?)? = nil, nameSpan: ((Foundation.URLRequest) -> (Swift.String)?)? = nil, spanCustomization: ((Foundation.URLRequest, any Coralogix.SpanBuilder) -> Swift.Void)? = nil, shouldInjectTracingHeaders: ((Foundation.URLRequest) -> (Swift.Bool)?)? = nil, injectCustomHeaders: ((inout Foundation.URLRequest, (any Coralogix.Span)?) -> Swift.Void)? = nil, createdRequest: ((Foundation.URLRequest, any Coralogix.Span) -> Swift.Void)? = nil, receivedResponse: ((Foundation.URLResponse, Any?, any Coralogix.Span) -> Swift.Void)? = nil, receivedError: ((any Swift.Error, Any?, Coralogix.HTTPStatus, any Coralogix.Span) -> Swift.Void)? = nil, delegateClassesToInstrument: [Swift.AnyClass]? = nil)
  public var shouldInstrument: ((Foundation.URLRequest) -> (Swift.Bool)?)?
  public var shouldRecordPayload: ((Foundation.URLSession) -> (Swift.Bool)?)?
  public var shouldInjectTracingHeaders: ((Foundation.URLRequest) -> (Swift.Bool)?)?
  public var injectCustomHeaders: ((inout Foundation.URLRequest, (any Coralogix.Span)?) -> Swift.Void)?
  public var nameSpan: ((Foundation.URLRequest) -> (Swift.String)?)?
  public var spanCustomization: ((Foundation.URLRequest, any Coralogix.SpanBuilder) -> Swift.Void)?
  public var createdRequest: ((Foundation.URLRequest, any Coralogix.Span) -> Swift.Void)?
  public var receivedResponse: ((Foundation.URLResponse, Any?, any Coralogix.Span) -> Swift.Void)?
  public var receivedError: ((any Swift.Error, Any?, Coralogix.HTTPStatus, any Coralogix.Span) -> Swift.Void)?
  public var delegateClassesToInstrument: [Swift.AnyClass]?
}
public enum Keys : Swift.String {
  case appName
  case appVersion
  case networkConnectionType
  case networkConnectionSubtype
  case cxRum
  case labels
  case text
  case iosSdk
  case errorContext
  case sdkVersion
  case sessionId
  case sessionCreationDate
  case userAgent
  case browser
  case browserVersion
  case operatingSystem
  case osVersion
  case device
  case userId
  case userName
  case userEmail
  case userMetadata
  case timestamp
  case environment
  case versionMetaData
  case sessionContext
  case prevSession
  case eventContext
  case type
  case source
  case severity
  case applicationName
  case subsystemName
  case logs
  case locationHref
  case eventType
  case applicationContext
  case userContext
  case deviceState
  case deviceContext
  case viewContext
  case viewController
  case country
  case cxLog
  case customLabels
  case interactionEventName
  case elementInnerText
  case elementInnerHtml
  case elementClasses
  case targetXpath
  case targetElement
  case targetElementType
  case fetch
  case networkRequestContext
  case method
  case duration
  case schema
  case statusCode
  case statusText
  case url
  case host
  case responseContentLength
  case fragments
  case traceId
  case spanId
  case callStackSymbols
  case console
  case code
  case domain
  case localizedDescription
  case userInfo
  case originalStackTrace
  case exceptionType
  case arch
  case crashTimestamp
  case processName
  case baseAddress
  case applicationIdentifier
  case triggeredByThread
  case message
  case data
  case logContext
  case pid
  case frameNumber
  case binary
  case functionAddressCalled
  case base
  case offset
  case platform
  case mobile
  case mobileSdk
  case framework
  case swift
  case ios
  case emulator
  case deviceName
  case battery
  case networkType
  case view
  case service
  case keySessionId
  case keySessionTimeInterval
  case snapshotContext
  case errorCount
  case viewCount
  case clickCount
  case isViewUnique
  case isSnapshotEvent
  case threads
  case httpResponseBodySize
  case stackTrace
  case instrumentationData
  case otelResource
  case otelSpan
  case parentSpanId
  case name
  case attributes
  case startTime
  case endTime
  case status
  case kind
  case tapName
  case tapCount
  case tapAttributes
  case tapObject
  case interactionContext
  case elementId
  case eventName
  case elementType
  case click
  case errorMessage
  case isCrash
  case tvos
  case television
  case coldEnd
  case mobileVitalsContext
  case lifeCycleContext
  case fps
  case mobileVitalsType
  case mobileVitalsValue
  case value
  case anr
  case skipEnrichmentWithIp
  case appDidFinishLaunching
  case appDidBecomeActiveNotification
  case appDidEnterBackgroundNotification
  case appWillTerminateNotification
  case applicationDidReceiveMemoryWarning
  case appDidReceiveMemoryWarningNotification
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CoralogixLogSeverity : Swift.Int {
  case debug
  case verbose
  case info
  case warn
  case error
  case critical
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Global : Swift.String {
  case sdk
  case swiftVersion
  case coralogixPath
  public static func appVersionInfo(indludeBuild: Swift.Bool = true) -> Swift.String
  public static func getOs() -> Swift.String
  public static func appName() -> Swift.String
  public static func osVersionInfo() -> Swift.String
  public static func getDeviceModel() -> Swift.String
  public static func modelIdentifier() -> Swift.String
  public static var identifier: Swift.String
  public static func isEmulator() -> Swift.Bool
  public static func getDeviceName() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CoralogixDomain : Swift.String {
  case EU1
  case EU2
  case US1
  case US2
  case AP1
  case AP2
  case AP3
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MetricsManager : ObjectiveC.NSObject, MetricKit.MXMetricManagerSubscriber {
  @objc public func didReceive(_ payloads: [MetricKit.MXMetricPayload])
  @available(iOS 14.0, *)
  @objc public func didReceive(_ payloads: [MetricKit.MXDiagnosticPayload])
  @objc deinit
}
public protocol NetworkProtocol {
  func getNetworkType() -> Swift.String
}
@_hasMissingDesignatedInitializers public class NetworkManager : Coralogix.NetworkProtocol {
  public func getNetworkType() -> Swift.String
  @objc deinit
}
public struct SDKSampler {
  public let sampleRate: Swift.Int
  public init(sampleRate: Swift.Int)
  public func shouldInitialized() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SessionManager {
  public func incrementErrorCounter()
  public func incrementClickCounter()
  public func getPrevSessionMetadata() -> Coralogix.SessionMetadata?
  public func getSessionMetadata() -> Coralogix.SessionMetadata?
  public func shutdown()
  public func reset()
  public func getErrorCount() -> Swift.Int
  public func getClickCount() -> Swift.Int
  @objc deinit
}
extension Coralogix.CoralogixRum {
  public func setupNotificationObservers()
}
@_hasMissingDesignatedInitializers public class ViewManager {
  public func isUniqueView(name: Swift.String) -> Swift.Bool
  public func getUniqueViewCount() -> Swift.Int
  public func set(cxView: Coralogix.CXView?)
  @objc deinit
}
public struct CXView {
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public static let swizzleTouchesEnded: Swift.Void
  @_Concurrency.MainActor @preconcurrency public static let swizzleSendAction: Swift.Void
}
@available(iOS 13, tvOS 13, *)
@_Concurrency.MainActor @preconcurrency public struct CXViewModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public func body(content: Coralogix.CXViewModifier.Content) -> some SwiftUICore.View
  
  @available(iOS 13, tvOS 13, *)
  public typealias Body = @_opaqueReturnTypeOf("$s9Coralogix14CXViewModifierV4body7contentQr7SwiftUI05_ViewC8_ContentVyACG_tF", 0) __
}
@available(iOS 13, tvOS 13, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func trackCXView(name: Swift.String) -> some SwiftUICore.View
  
}
extension Coralogix.SdkFramework : Swift.Equatable {}
extension Coralogix.SdkFramework : Swift.Hashable {}
extension Coralogix.SdkFramework : Swift.RawRepresentable {}
extension Coralogix.CoralogixExporterOptions.InstrumentationType : Swift.Equatable {}
extension Coralogix.CoralogixExporterOptions.InstrumentationType : Swift.Hashable {}
extension Coralogix.Connection : Swift.Equatable {}
extension Coralogix.Connection : Swift.Hashable {}
extension Coralogix.OpenTelemetryContextKeys : Swift.Equatable {}
extension Coralogix.OpenTelemetryContextKeys : Swift.Hashable {}
extension Coralogix.OpenTelemetryContextKeys : Swift.RawRepresentable {}
extension Coralogix.Severity : Swift.Hashable {}
extension Coralogix.Severity : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes : Swift.Equatable {}
extension Coralogix.SemanticAttributes : Swift.Hashable {}
extension Coralogix.SemanticAttributes : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.LogIostreamValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.LogIostreamValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.LogIostreamValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.TypeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.TypeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.TypeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.OpentracingRefTypeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.OpentracingRefTypeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.OpentracingRefTypeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.OtelStatusCodeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.OtelStatusCodeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.OtelStatusCodeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.FaasTriggerValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.FaasTriggerValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.FaasTriggerValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.GraphqlOperationTypeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.GraphqlOperationTypeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.GraphqlOperationTypeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.MessageTypeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.MessageTypeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.MessageTypeValues : Swift.RawRepresentable {}
extension Coralogix.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.Equatable {}
extension Coralogix.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.Hashable {}
extension Coralogix.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.RawRepresentable {}
extension Coralogix.SpanKind : Swift.Hashable {}
extension Coralogix.SpanKind : Swift.RawRepresentable {}
extension Coralogix.ExportResult : Swift.Equatable {}
extension Coralogix.ExportResult : Swift.Hashable {}
extension Coralogix.AggregationType : Swift.Equatable {}
extension Coralogix.AggregationType : Swift.Hashable {}
extension Coralogix.AggregationType : Swift.RawRepresentable {}
extension Coralogix.MetricExporterResultCode : Swift.Equatable {}
extension Coralogix.MetricExporterResultCode : Swift.Hashable {}
extension Coralogix.AggregationTemporality : Swift.Equatable {}
extension Coralogix.AggregationTemporality : Swift.Hashable {}
extension Coralogix.MetricDataType : Swift.Equatable {}
extension Coralogix.MetricDataType : Swift.Hashable {}
extension Coralogix.InstrumentType : Swift.Equatable {}
extension Coralogix.InstrumentType : Swift.Hashable {}
extension Coralogix.InstrumentValueType : Swift.Equatable {}
extension Coralogix.InstrumentValueType : Swift.Hashable {}
extension Coralogix.EmptyMetricStorage : Coralogix.MetricStorage {}
extension Coralogix.EmptyMetricStorage : Coralogix.WritableMetricStorage {}
extension Coralogix.SynchronousMetricStorage : Coralogix.MetricStorage {}
extension Coralogix.SynchronousMetricStorage : Coralogix.WritableMetricStorage {}
extension Coralogix.ResourceAttributes : Swift.Equatable {}
extension Coralogix.ResourceAttributes : Swift.Hashable {}
extension Coralogix.ResourceAttributes : Swift.RawRepresentable {}
extension Coralogix.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Equatable {}
extension Coralogix.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Hashable {}
extension Coralogix.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.RawRepresentable {}
extension Coralogix.SpanExporterResultCode : Swift.Equatable {}
extension Coralogix.SpanExporterResultCode : Swift.Hashable {}
extension Coralogix.Keys : Swift.Equatable {}
extension Coralogix.Keys : Swift.Hashable {}
extension Coralogix.Keys : Swift.RawRepresentable {}
extension Coralogix.CoralogixLogSeverity : Swift.Equatable {}
extension Coralogix.CoralogixLogSeverity : Swift.Hashable {}
extension Coralogix.CoralogixLogSeverity : Swift.RawRepresentable {}
extension Coralogix.Global : Swift.Equatable {}
extension Coralogix.Global : Swift.Hashable {}
extension Coralogix.Global : Swift.RawRepresentable {}
extension Coralogix.CoralogixDomain : Swift.Equatable {}
extension Coralogix.CoralogixDomain : Swift.Hashable {}
extension Coralogix.CoralogixDomain : Swift.RawRepresentable {}
@available(iOS 13, tvOS 13, *)
extension Coralogix.CXViewModifier : Swift.Sendable {}
